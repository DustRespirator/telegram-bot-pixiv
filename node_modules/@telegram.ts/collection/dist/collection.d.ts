type Entry<K, V> = [K, V];
interface IGroupedValues<K, V> {
    /**
     * The key associated with the grouped values.
     */
    key: K;
    /**
     * An array of values grouped under the key.
     */
    values: V[];
}
/**
 * A collection data structure that maps unique keys to values.
 */
declare class Collection<K, V> {
    /**
     * The underlying map that stores the key-value pairs.
     */
    readonly items: Map<K, V>;
    /**
     * Create a new Collection instance.
     * @param entries - An optional array of [key, value] pairs to add to the collection.
     */
    constructor(entries?: readonly Entry<K, V>[]);
    /**
     * Retrieve the value associated with the given key.
     * @param key - The key to look up.
     * @returns The value associated with the key, or undefined if the key is not in the collection.
     */
    get(key: K): V | undefined;
    /**
     * Associate the given value with the given key.
     * @param key - The key to set.
     * @param value - The value to associate with the key.
     * @returns The collection instance (for chaining).
     */
    set(key: K, value: V): Collection<K, V>;
    /**
     * Check whether the collection contains a given key.
     * @param key - The key to look for.
     * @returns True if the collection contains the key, false otherwise.
     */
    has(key: K): boolean;
    /**
     * Checks if keys exist and their corresponding values satisfy a condition.
     * @param keys - An array of keys to check.
     * @param isEnabled - Enables the check condition.
     * @returns An object containing keys and their existence status, or a boolean if isEnabled is true.
     */
    hasKeys(keys: K[], isEnabled?: boolean): Record<string, boolean> | boolean;
    /**
     * Checks if values exist and their corresponding keys satisfy a condition.
     * @param values - An array of values to check.
     * @param isEnabled - Enables the check condition.
     * @returns An object containing values and their existence status, or a boolean if isEnabled is true.
     */
    hasValues(values: V[], isEnabled?: boolean): Record<string, boolean> | boolean;
    /**
     * Remove the key-value pair associated with the given key.
     * @param key - The key to remove.
     * @returns True if the key-value pair was removed, false if the key was not in the collection.
     */
    delete(key: K): boolean;
    /**
     * Ensure that a key exists in the collection. If the key does not exist, it will be associated with the given value.
     * @param key - The key to ensure.
     * @param value - The value to associate with the key if it does not exist.
     * @returns The collection instance (for chaining).
     */
    ensure(key: K, value: V): Collection<K, V>;
    /**
     * Remove all key-value pairs from the collection.
     */
    clear(): void;
    /**
     * Retrieve a random value from the collection.
     * @returns A random value from the collection, or undefined if the collection is empty.
     */
    random(): V | undefined;
    /**
     * Call a given function for each key-value pair in the collection.
     * @param callbackFn - The function to call for each pair. It should take three arguments: the value, the key, and the collection instance.
     * @param thisArg - An optional value to use as `this` when calling the function.
     */
    forEach(callbackFn: (value: V, key: K, collection: Collection<K, V>) => void, thisArg?: unknown): void;
    /**
     * Create a new collection that includes only the key-value pairs that satisfy a given condition.
     * @param callbackFn - The condition to test each pair against. It should take three arguments: the value, the key, and the collection instance. Return true to include the pair, false to exclude it.
     * @param thisArg - An optional value to use as `this` when calling the function.
     * @returns A new Collection instance containing the filtered key-value pairs.
     */
    filter(callbackFn: (value: V, key: K, collection: Collection<K, V>) => boolean, thisArg?: unknown): Collection<K, V>;
    /**
     * Returns the value of the first element in the collection that satisfies the provided testing function.
     * @param callbackFn - Function to test for each element
     * @param thisArg - Object to use as 'this' when executing the callback
     * @returns The value of the first element that passes the test, or undefined if no element passes the test
     */
    find(callbackFn: (value: V, key: K, collection: Collection<K, V>) => boolean, thisArg?: unknown): V | undefined;
    /**
     * Returns the value of the first element in the collection that satisfies the provided testing function.
     * @param callbackFn - Function to test for each element
     * @param thisArg - Object to use as 'this' when executing the callback
     * @returns The value of the first element that passes the test, or undefined if no element passes the test
     */
    findLast(callbackFn: (value: V, key: K, collection: Collection<K, V>) => boolean, thisArg?: unknown): V | undefined;
    /**
     * Applies a function against an accumulator and each element in the collection (from right to left)
     * to reduce it to a single value.
     * @param callbackFn - Function to execute on each element in the collection
     * @param initialValue - Value to use as the first argument to the first call of the callback
     * @returns The reduced value
     */
    reduceRight<U>(callbackFn: (accumulator: U, value: V, key: K, collection: Collection<K, V>) => U, initialValue?: U): U;
    /**
     * Creates a new collection with the results of calling a provided function on every element in the calling collection.
     * @param callbackFn - Function that produces an element of the new collection
     * @param thisArg - Object to use as 'this' when executing the callback
     * @returns A new collection with the results of calling the callback on each element
     */
    map<U>(callbackFn: (value: V, key: K, collection: Collection<K, V>) => U, thisArg?: unknown): Collection<K, U>;
    /**
     * Tests whether at least one element in the collection passes the test implemented by the provided function.
     * @param callbackFn - Function to test for each element
     * @param thisArg - Object to use as 'this' when executing the callback
     * @returns True if at least one element passes the test, false otherwise
     */
    some(callbackFn: (value: V, key: K, collection: Collection<K, V>) => boolean, thisArg?: unknown): boolean;
    /**
     * Tests whether all elements in the collection pass the test implemented by the provided function.
     * @param callbackFn - Function to test for each element
     * @param thisArg - Object to use as 'this' when executing the callback
     * @returns True if all elements pass the test, false otherwise
     */
    every(callbackFn: (value: V, key: K, collection: Collection<K, V>) => boolean, thisArg?: unknown): boolean;
    /**
     * Returns an array containing the keys in the same order as the original collection.
     * @returns An array of keys.
     */
    keys(): K[];
    /**
     * Returns an array containing the values in the same order as the original collection.
     * @returns An array of values.
     */
    values(): V[];
    /**
     * Returns an array containing all of the key-value pairs in the same order as the original collection.
     * @returns An array of [key, value] pairs.
     */
    entries(): Entry<K, V>[];
    /**
     * Returns the first key found to be associated with the given value.
     * @param value - The value to search for.
     * @returns The key associated with the value, or undefined if the value is not found.
     */
    keyOf(value: V): K | undefined;
    /**
     * Returns a new Collection with the value at the specified index replaced.
     * @template K, V
     * @param index - The index of the element to replace.
     * @param value - The new value to assign.
     * @returns A new Collection with the updated value.
     */
    with(index: number, value: V): Collection<K, V> | undefined;
    /**
     * Creates a copy of this collection.
     */
    clone(): Collection<K, V>;
    /**
     * @returns an instance of the Map class that contains all the elements of the given collection
     */
    toMap(): Map<K, V>;
    /**
     * Create a new collection with the key-value pairs reversed.
     * @returns A new Collection instance with the key-value pairs reversed.
     */
    reverse(): void;
    /**
     * Returns a new Collection instance with the key-value pairs in reversed order.
     * @returns A new Collection instance with the reversed key-value pairs.
     */
    toReversed(): Collection<K, V>;
    /**
     * Returns a new Collection instance containing a subset of key-value pairs starting from the specified start index (inclusive) to the specified end index (exclusive).
     * @param start - The start index.
     * @param end - The end index.
     * @returns A new Collection instance with the specified subset of key-value pairs.
     */
    toSplised(start: number, end: number): Collection<K, V>;
    /**
     * Sorts the collection by keys using a custom sorting function.
     * @param compareFn - The comparison function to use for sorting.
     * @returns A new sorted Collection instance.
     */
    sort(compareFn?: (a: [K, V], b: [K, V]) => number): Collection<K, V>;
    /**
     * Sorts the collection by keys using a custom sorting function.
     * @param compareFn - The comparison function to use for sorting.
     * @returns A new sorted Collection instance.
     */
    toSorted(compareFn?: (a: [K, V], b: [K, V]) => number): Collection<K, V>;
    /**
     * Create a new collection with all duplicate values removed.
     * @returns A new Collection instance with all duplicate values removed.
     */
    sweep(): Collection<K, V>;
    /**
     * Returns the number of key-value pairs in the collection.
     * @returns The number of key-value pairs.
     */
    get size(): number;
    /**
     * Checks if the collection contains any key-value pairs.
     * @returns True if the collection is empty, false otherwise.
     */
    get isEmpty(): boolean;
    /**
     * Groups the values of the collection by the result of a provided function.
     * @param callbackFn - Function to transform each value into a key for grouping
     * @returns An array of objects representing the grouped values, with each object containing a key and an array of values
     */
    groupBy<T>(callbackFn: (value: V, key: K, collection: Collection<K, V>) => T): IGroupedValues<T, V>[];
    /**
     * Returns an object that contains all the elements of the collection as properties of the keys.
     * @returns An object containing the elements of the collection.
     */
    toJSON(): {
        [key: string]: V;
    };
    /**
     * Returns a new Iterator object that contains the [key, value] pairs for each element in the collection.
     * @returns An iterator object that can be used to iterate over the key-value pairs of the Collection.
     */
    [Symbol.iterator](): IterableIterator<[K, V]>;
}
export { Collection, Entry, IGroupedValues };
