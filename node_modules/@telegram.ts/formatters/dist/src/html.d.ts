import type { TypeSupportedLanguages } from "./constants";
/**
 * Wraps the text in bold HTML tags.
 * @param text - The text to be wrapped in bold tags.
 * @returns The bolded HTML string.
 */
declare function bold(text: string): string;
/**
 * Wraps the text in strong HTML tags.
 * @param text - The text to be wrapped in strong tags.
 * @returns The HTML string with strong emphasis.
 */
declare function strong(text: string): string;
/**
 * Wraps the text in italic HTML tags.
 * @param text - The text to be wrapped in italic tags.
 * @returns The italicized HTML string.
 */
declare function italic(text: string): string;
/**
 * Wraps the text in emphasis HTML tags.
 * @param text - The text to be wrapped in emphasis tags.
 * @returns The emphasized HTML string.
 */
declare function emphasis(text: string): string;
/**
 * Wraps the text in underline HTML tags.
 * @param text - The text to be wrapped in underline tags.
 * @returns The underlined HTML string.
 */
declare function underline(text: string): string;
/**
 * Wraps the text in insert HTML tags.
 * @param text - The text to be wrapped in insert tags.
 * @returns The HTML string with inserted text.
 */
declare function ins(text: string): string;
/**
 * Wraps the text in strikethrough HTML tags.
 * @param text - The text to be wrapped in strikethrough tags.
 * @returns The HTML string with strikethrough text.
 */
declare function strikethrough(text: string): string;
/**
 * Wraps the text in strike HTML tags.
 * @param text - The text to be wrapped in strike tags.
 * @returns The HTML string with strikethrough (strike) text.
 */
declare function strike(text: string): string;
/**
 * Wraps the text in delete HTML tags.
 * @param text - The text to be wrapped in delete tags.
 * @returns The HTML string with deleted text.
 */
declare function del(text: string): string;
/**
 * Wraps the text in Telegram spoiler HTML tags.
 * @param text - The text to be wrapped in spoiler tags.
 * @returns The HTML string with Telegram spoiler formatting.
 */
declare function spoiler(text: string): string;
/**
 * Wraps the text in Telegram-specific spoiler tags.
 * @param text - The text to be wrapped in Telegram spoiler tags.
 * @returns The HTML string with Telegram-specific spoiler formatting.
 */
declare function tgSpoiler(text: string): string;
/**
 * Creates an inline URL link with the given text and URL.
 * @param text - The display text for the link.
 * @param url - The URL to link to.
 * @returns The HTML string for an inline link.
 */
declare function inlineURL(text: string, url: string): string;
/**
 * Creates an inline mention of a Telegram user by their user ID.
 * @param text - The display text for the mention.
 * @param userId - The Telegram user ID to mention.
 * @returns The HTML string for an inline mention.
 */
declare function inlineMention(text: string, userId: string): string;
/**
 * Creates an inline emoji using the provided emoji ID.
 * @param emojiId - The ID of the emoji to include.
 * @returns The HTML string for an inline emoji.
 */
declare function inlineEmoji(emojiId: string): string;
/**
 * Wraps the text in inline code HTML tags.
 * @param text - The text to be wrapped in inline code tags.
 * @returns The HTML string with inline code formatting.
 */
declare function inlineCode(text: string): string;
/**
 * Wraps the text in blockquote HTML tags.
 * @param text - The text to be wrapped in blockquote tags.
 * @returns The HTML string with blockquote formatting.
 */
declare function blockquote(text: string): string;
/**
 * Wraps the text in expandable blockquote HTML tags.
 * @param text - The text to be wrapped in expandable blockquote tags.
 * @returns The HTML string with expandable blockquote formatting.
 */
declare function blockquoteExpandable(text: string): string;
/**
 * Wraps the text in preformatted code block HTML tags.
 * @param text - The text to be wrapped in preformatted code block tags.
 * @returns The HTML string with preformatted code block formatting.
 */
declare function preFormattedCodeBlock(text: string): string;
/**
 * Wraps the text in a preformatted code block with a specified language.
 * @param text - The text to be wrapped in a preformatted code block.
 * @param language - The programming language of the code block.
 * @returns The HTML string with preformatted code block formatting and language specification.
 */
declare function preFormattedCodeBlockLanguage(text: string, language: TypeSupportedLanguages): string;
declare const _default: {
    bold: typeof bold;
    strong: typeof strong;
    italic: typeof italic;
    emphasis: typeof emphasis;
    underline: typeof underline;
    ins: typeof ins;
    strikethrough: typeof strikethrough;
    strike: typeof strike;
    del: typeof del;
    spoiler: typeof spoiler;
    tgSpoiler: typeof tgSpoiler;
    inlineURL: typeof inlineURL;
    inlineMention: typeof inlineMention;
    inlineEmoji: typeof inlineEmoji;
    inlineCode: typeof inlineCode;
    blockquote: typeof blockquote;
    blockquoteExpandable: typeof blockquoteExpandable;
    preFormattedCodeBlock: typeof preFormattedCodeBlock;
    preFormattedCodeBlockLanguage: typeof preFormattedCodeBlockLanguage;
};
export default _default;
//# sourceMappingURL=html.d.ts.map