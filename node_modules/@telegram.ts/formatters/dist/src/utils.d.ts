import type { MessageEntity } from "./type";
import type { ParseMode } from "@telegram.ts/types";
/**
 * Defines the types of entities that can be parsed from text.
 */
type TypeEntity = "mention" | "hashtag" | "cashtag" | "bot_command" | "url" | "email" | "phone_number" | "bold" | "italic" | "underline" | "strikethrough" | "spoiler" | "blockquote" | "code" | "pre" | "text_link" | "text_mention" | "custom_emoji";
/**
 * Patterns used to match HTML entities in the text.
 */
declare const htmlEntityPatterns: Record<string, RegExp>;
/**
 * Patterns used to match Markdown entities in the text.
 */
declare const markdownPatterns: Record<string, RegExp>;
/**
 * Patterns used to match MarkdownV2 entities in the text.
 */
declare const markdownV2Patterns: Record<string, RegExp>;
/**
 * Parses text to extract entities based on the specified format.
 * @param text - The text to parse for entities.
 * @param format - The format of the text, either "HTML", "Markdown", or "MarkdownV2".
 * @returns An array of MessageEntity objects representing the parsed entities.
 */
declare function parseEntities(text: string, format: ParseMode): MessageEntity[];
/**
 * Escapes HTML special characters in a string.
 * @param content - The content to escape.
 * @returns The escaped string.
 */
declare function escapeHTML(content: string): string;
/**
 * Escapes Markdown special characters in a string.
 * @param content - The content to escape.
 * @returns The escaped string.
 */
declare function escapeMarkdown(content: string): string;
export { parseEntities, escapeHTML, escapeMarkdown, htmlEntityPatterns, markdownPatterns, markdownV2Patterns, type TypeEntity, };
//# sourceMappingURL=utils.d.ts.map