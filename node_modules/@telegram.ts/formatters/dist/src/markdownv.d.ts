import type { TypeSupportedLanguages } from "./constants";
/**
 * Formats the text as bold using asterisks.
 * @param text - The text to be formatted in bold.
 * @returns The formatted string with bold markdown.
 */
declare function bold(text: string): string;
/**
 * Formats the text as italic using underscores.
 * @param text - The text to be formatted in italics.
 * @returns The formatted string with italic markdown.
 */
declare function italic(text: string): string;
/**
 * Formats the text as underlined using double underscores.
 * @param text - The text to be underlined.
 * @returns The formatted string with underline markdown.
 */
declare function underline(text: string): string;
/**
 * Formats the text as strikethrough using tildes.
 * @param text - The text to be struck through.
 * @returns The formatted string with strikethrough markdown.
 */
declare function strikethrough(text: string): string;
/**
 * Formats the text as a spoiler using double pipes.
 * @param text - The text to be hidden as a spoiler.
 * @returns The formatted string with spoiler markdown.
 */
declare function spoiler(text: string): string;
/**
 * Creates a markdown link with the specified text and URL.
 * @param text - The display text for the link.
 * @param url - The URL to link to.
 * @returns The formatted string with an inline URL.
 */
declare function inlineURL(text: string, url: string): string;
/**
 * Creates an inline mention of a Telegram user by their user ID.
 * @param text - The display text for the mention.
 * @param userId - The Telegram user ID to mention.
 * @returns The formatted string with an inline mention.
 */
declare function inlineMention(text: string, userId: string): string;
/**
 * Inserts an inline emoji using the provided emoji ID.
 * @param emojiId - The ID of the emoji to include.
 * @returns The formatted string with an inline emoji.
 */
declare function inlineEmoji(emojiId: string): string;
/**
 * Formats the text as inline code using backticks.
 * @param text - The text to be formatted as inline code.
 * @returns The formatted string with inline code markdown.
 */
declare function inlineCode(text: string): string;
/**
 * Formats the text as a blockquote using the greater-than symbol.
 * @param text - The text to be formatted as a blockquote.
 * @returns The formatted string with blockquote markdown.
 */
declare function blockquote(text: string): string;
/**
 * Formats the text as an expandable blockquote.
 * @param text - The text to be formatted as an expandable blockquote.
 * @returns The formatted string with expandable blockquote markdown.
 */
declare function blockquoteExpandable(text: string): string;
/**
 * Formats the text as a preformatted code block using triple backticks.
 * @param text - The text to be formatted as a preformatted code block.
 * @returns The formatted string with a preformatted code block.
 */
declare function preFormattedCodeBlock(text: string): string;
/**
 * Formats the text as a preformatted code block with a specified language.
 * @param text - The text to be formatted in a code block.
 * @param language - The programming language of the code block.
 * @returns The formatted string with a language-specific preformatted code block.
 */
declare function preFormattedCodeBlockLanguage(text: string, language: TypeSupportedLanguages): string;
declare const _default: {
    v1: {
        bold: typeof bold;
        italic: typeof italic;
        inlineURL: typeof inlineURL;
        inlineMention: typeof inlineMention;
        inlineCode: typeof inlineCode;
        preFormattedCodeBlock: typeof preFormattedCodeBlock;
        preFormattedCodeBlockLanguage: typeof preFormattedCodeBlockLanguage;
    };
    bold: typeof bold;
    italic: typeof italic;
    underline: typeof underline;
    strikethrough: typeof strikethrough;
    spoiler: typeof spoiler;
    inlineURL: typeof inlineURL;
    inlineMention: typeof inlineMention;
    inlineEmoji: typeof inlineEmoji;
    inlineCode: typeof inlineCode;
    blockquote: typeof blockquote;
    blockquoteExpandable: typeof blockquoteExpandable;
    preFormattedCodeBlock: typeof preFormattedCodeBlock;
    preFormattedCodeBlockLanguage: typeof preFormattedCodeBlockLanguage;
};
export default _default;
//# sourceMappingURL=markdownv.d.ts.map