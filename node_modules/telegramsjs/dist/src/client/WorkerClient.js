"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorketClient = void 0;
const Constants_1 = require("../util/Constants");
const Message_1 = require("../structures/message/Message");
const Poll_1 = require("../structures/media/Poll");
const PollAnswer_1 = require("../structures/PollAnswer");
const InlineQuery_1 = require("../structures/InlineQuery");
const ShippingQuery_1 = require("../structures/ShippingQuery");
const ChatJoinRequest_1 = require("../structures/ChatJoinRequest");
const ChatBoostUpdated_1 = require("../structures/ChatBoostUpdated");
const ChatBoostRemoved_1 = require("../structures/ChatBoostRemoved");
const PreCheckoutQuery_1 = require("../structures/PreCheckoutQuery");
const ChatMemberUpdated_1 = require("../structures/ChatMemberUpdated");
const ChosenInlineResult_1 = require("../structures/ChosenInlineResult");
const MessageReactionUpdated_1 = require("../structures/MessageReactionUpdated");
const MessageReactionCountUpdated_1 = require("../structures/MessageReactionCountUpdated");
const CallbackQuery_1 = require("../structures/CallbackQuery");
const BusinessConnection_1 = require("../structures/business/BusinessConnection");
const BusinessMessagesDeleted_1 = require("../structures/business/BusinessMessagesDeleted");
const PaidMediaPurchased_1 = require("../structures/PaidMediaPurchased");
class WorketClient {
    constructor(client) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: client
        });
    }
    processUpdate(data) {
        this.client.emit(Constants_1.Events.RawUpdate, Object.assign({}, data, { client: this.client }));
        if ("message" in data ||
            "channel_post" in data ||
            "business_message" in data) {
            if ("new_chat_members" in (data.message || {})) {
                return this.onChatMemberAdd(data.message);
            }
            if ("left_chat_member" in (data.message || {})) {
                return this.onChatMemberRemove(data.message);
            }
            return this.onMessage(data.message || data.channel_post || data.business_message);
        }
        if ("business_connection" in data) {
            return this.onBusinessConnection(data.business_connection);
        }
        if ("edited_message" in data ||
            "edited_channel_post" in data ||
            "edited_business_message" in data) {
            return this.onMessageEdit(data.edited_message ||
                data.edited_channel_post ||
                data.edited_business_message);
        }
        if ("deleted_business_messages" in data) {
            return this.onDeletedBusinessMessages(data.deleted_business_messages);
        }
        if ("message_reaction" in data) {
            return this.onMessageReaction(data.message_reaction);
        }
        if ("message_reaction_count" in data) {
            return this.onMessageReactionCount(data.message_reaction_count);
        }
        if ("inline_query" in data) {
            return this.onInlineQuery(data.inline_query);
        }
        if ("chosen_inline_result" in data) {
            return this.onChosenInlineResult(data.chosen_inline_result);
        }
        if ("callback_query" in data) {
            return this.onCallbackQuery(data.callback_query);
        }
        if ("shipping_query" in data) {
            return this.onShippingQuery(data.shipping_query);
        }
        if ("pre_checkout_query" in data) {
            return this.onPreCheckoutQuery(data.pre_checkout_query);
        }
        if ("poll" in data) {
            return this.onPoll(data.poll);
        }
        if ("poll_answer" in data) {
            return this.onPollAnswer(data.poll_answer);
        }
        if ("my_chat_member" in data) {
            return this.onMyChatMember(data.my_chat_member);
        }
        if ("chat_member" in data) {
            return this.onChatMember(data.chat_member);
        }
        if ("chat_join_request" in data) {
            return this.onChatJoinRequest(data.chat_join_request);
        }
        if ("chat_boost" in data) {
            return this.onChatBoost(data.chat_boost);
        }
        if ("removed_chat_boost" in data) {
            return this.onRemovedChatBoost(data.removed_chat_boost);
        }
        if ("purchased_paid_media" in data) {
            return this.onPurchasedPaidMedia(data.purchased_paid_media);
        }
        return;
    }
    onMessage(data) {
        if (!data)
            return;
        const message = new Message_1.Message(this.client, data);
        this.client.emit(Constants_1.Events.Message, message);
        return message;
    }
    onBusinessConnection(data) {
        if (!data)
            return;
        const business = new BusinessConnection_1.BusinessConnection(this.client, data);
        this.client.emit(Constants_1.Events.BusinessConnection, business);
        return business;
    }
    onMessageEdit(data) {
        if (!data)
            return;
        const newMessage = new Message_1.Message(this.client, data);
        this.client.emit(Constants_1.Events.EditedMessage, newMessage);
        return newMessage;
    }
    onDeletedBusinessMessages(data) {
        if (!data)
            return;
        const businessMessage = new BusinessMessagesDeleted_1.BusinessMessagesDeleted(this.client, data);
        this.client.emit(Constants_1.Events.DeletedBusinessMessages, businessMessage);
        return businessMessage;
    }
    onMessageReaction(data) {
        if (!data)
            return;
        const messageReaction = new MessageReactionUpdated_1.MessageReactionUpdated(this.client, data);
        this.client.emit(Constants_1.Events.MessageReaction, messageReaction);
        return messageReaction;
    }
    onMessageReactionCount(data) {
        if (!data)
            return;
        const messageReaction = new MessageReactionCountUpdated_1.MessageReactionCountUpdated(this.client, data);
        this.client.emit(Constants_1.Events.MessageReactionCount, messageReaction);
        return messageReaction;
    }
    onInlineQuery(data) {
        if (!data)
            return;
        const inline = new InlineQuery_1.InlineQuery(this.client, data);
        this.client.emit(Constants_1.Events.InlineQuery, inline);
        return inline;
    }
    onChosenInlineResult(data) {
        if (!data)
            return;
        const chosenInline = new ChosenInlineResult_1.ChosenInlineResult(this.client, data);
        this.client.emit(Constants_1.Events.ChosenInlineResult, chosenInline);
        return chosenInline;
    }
    onCallbackQuery(data) {
        if (!data)
            return;
        const callback = new CallbackQuery_1.CallbackQuery(this.client, data);
        this.client.emit(Constants_1.Events.CallbackQuery, callback);
        return callback;
    }
    onShippingQuery(data) {
        if (!data)
            return;
        const shipping = new ShippingQuery_1.ShippingQuery(this.client, data);
        this.client.emit(Constants_1.Events.ShippingQuery, shipping);
        return shipping;
    }
    onPreCheckoutQuery(data) {
        if (!data)
            return;
        const preCheckout = new PreCheckoutQuery_1.PreCheckoutQuery(this.client, data);
        this.client.emit(Constants_1.Events.PreCheckoutQuery, preCheckout);
        return preCheckout;
    }
    onPoll(data) {
        if (!data)
            return;
        const poll = new Poll_1.Poll(this.client, data);
        this.client.emit(Constants_1.Events.Poll, poll);
        return poll;
    }
    onPollAnswer(data) {
        if (!data)
            return;
        const poll = new PollAnswer_1.PollAnswer(this.client, data);
        this.client.emit(Constants_1.Events.PollAnswer, poll);
        return poll;
    }
    onMyChatMember(data) {
        if (!data)
            return;
        const myChat = new ChatMemberUpdated_1.ChatMemberUpdated(this.client, data);
        this.client.emit(Constants_1.Events.MyChatMember, myChat);
        return myChat;
    }
    onChatMember(data) {
        if (!data)
            return;
        const chatMember = new ChatMemberUpdated_1.ChatMemberUpdated(this.client, data);
        this.client.emit(Constants_1.Events.ChatMember, chatMember);
        return chatMember;
    }
    onChatMemberAdd(data) {
        var _a;
        if (!data)
            return;
        const message = new Message_1.Message(this.client, data);
        if (this.client.user !== null &&
            ((_a = message.newChatMembers) === null || _a === void 0 ? void 0 : _a.some(({ id }) => id === this.client.user.id))) {
            this.client.emit(Constants_1.Events.ChatCreate, message);
            return message;
        }
        else {
            this.client.emit(Constants_1.Events.ChatMemberAdd, message);
            return message;
        }
    }
    onChatMemberRemove(data) {
        if (!data)
            return;
        const message = new Message_1.Message(this.client, data);
        if (message.leftChatMember !== undefined &&
            this.client.user !== null &&
            message.leftChatMember.id === this.client.user.id) {
            this.client.emit("chatDelete", message);
            return message;
        }
        else {
            this.client.emit(Constants_1.Events.ChatMemberRemove, message);
            return message;
        }
    }
    onChatJoinRequest(data) {
        if (!data)
            return;
        const chatJoin = new ChatJoinRequest_1.ChatJoinRequest(this.client, data);
        this.client.emit(Constants_1.Events.ChatJoinRequest, chatJoin);
        return chatJoin;
    }
    onChatBoost(data) {
        if (!data)
            return;
        const chatBoost = new ChatBoostUpdated_1.ChatBoostUpdated(this.client, data);
        this.client.emit(Constants_1.Events.ChatBoost, chatBoost);
        return chatBoost;
    }
    onRemovedChatBoost(data) {
        if (!data)
            return;
        const chatBoost = new ChatBoostRemoved_1.ChatBoostRemoved(this.client, data);
        this.client.emit(Constants_1.Events.RemovedChatBoost, chatBoost);
        return chatBoost;
    }
    onPurchasedPaidMedia(data) {
        if (!data)
            return;
        const paidMedia = new PaidMediaPurchased_1.PaidMediaPurchased(this.client, data);
        this.client.emit(Constants_1.Events.PurchasedPaidMedia, paidMedia);
        return paidMedia;
    }
}
exports.WorketClient = WorketClient;
