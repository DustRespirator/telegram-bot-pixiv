"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const node_events_1 = require("node:events");
const Rest_1 = require("../rest/Rest");
const collection_1 = require("@telegram.ts/collection");
const UserManager_1 = require("../managers/UserManager");
const ChatManager_1 = require("../managers/ChatManager");
const index_1 = require("../structures/index");
const ChatPermissions_1 = require("../util/permission/ChatPermissions");
const ApiPermissions_1 = require("../util/permission/ApiPermissions");
function toSnakeCase(params) {
    const snakeCasedParams = {};
    for (const key in params) {
        if (Object.prototype.hasOwnProperty.call(params, key)) {
            const snakeCaseKey = key.replace(/([A-Z])/g, "_$1").toLowerCase();
            snakeCasedParams[snakeCaseKey] = params[key];
        }
    }
    return snakeCasedParams;
}
class BaseClient extends node_events_1.EventEmitter {
    constructor(authToken, options) {
        var _a, _b;
        super();
        Object.defineProperty(this, "rest", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.rest = new Rest_1.Rest(authToken, options === null || options === void 0 ? void 0 : options.restOptions);
        this.users = new UserManager_1.UserManager(this, [], {
            cacheSize: (_a = options === null || options === void 0 ? void 0 : options.userCacheMaxSize) !== null && _a !== void 0 ? _a : -1,
            ...((options === null || options === void 0 ? void 0 : options.userCacheFilter) && {
                cacheFilter: options === null || options === void 0 ? void 0 : options.userCacheFilter,
            }),
        });
        this.chats = new ChatManager_1.ChatManager(this, [], {
            cacheSize: (_b = options === null || options === void 0 ? void 0 : options.chatCacheMaxSize) !== null && _b !== void 0 ? _b : -1,
            ...((options === null || options === void 0 ? void 0 : options.chatCacheFilter) && {
                cacheFilter: options === null || options === void 0 ? void 0 : options.chatCacheFilter,
            }),
        });
        this.updates = new collection_1.Collection();
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.on(event, listener);
        return this;
    }
    incrementMaxListeners() {
        const maxListeners = this.getMaxListeners();
        if (maxListeners !== 0) {
            this.setMaxListeners(maxListeners + 1);
        }
    }
    decrementMaxListeners() {
        const maxListeners = this.getMaxListeners();
        if (maxListeners !== 0) {
            this.setMaxListeners(maxListeners - 1);
        }
    }
    async getUpdates(params) {
        return this.rest.request("getUpdates", toSnakeCase(params || {}));
    }
    async setWebhook(params) {
        return this.rest.request("setWebhook", toSnakeCase(params));
    }
    async getMe() {
        return this.rest
            .request("getMe")
            .then((res) => new index_1.ClientUser(this, res));
    }
    async logOut() {
        return this.rest.request("logOut");
    }
    async close() {
        return this.rest.request("close");
    }
    async deleteWebhook(dropPendingUpdates) {
        return this.rest.request("deleteWebhook", {
            dropPendingUpdates,
        });
    }
    async getWebhookInfo() {
        return this.rest
            .request("getWebhookInfo")
            .then((res) => new index_1.WebhookInfo(this, res));
    }
    async sendMessage(params) {
        return this.rest
            .request("sendMessage", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendPhoto(params) {
        return this.rest
            .request("sendPhoto", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendAudio(params) {
        return this.rest
            .request("sendAudio", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendPaidMedia(params) {
        return this.rest
            .request("sendPaidMedia", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendDocument(params) {
        return this.rest
            .request("sendDocument", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendVideo(params) {
        return this.rest
            .request("sendVideo", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendAnimation(params) {
        return this.rest
            .request("sendAnimation", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendVoice(params) {
        return this.rest
            .request("sendVoice", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendVideoNote(params) {
        return this.rest
            .request("sendVideoNote", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendMediaGroup(params) {
        return this.rest
            .request("sendMediaGroup", toSnakeCase(params))
            .then((res) => res.map((media) => new index_1.Message(this, media)));
    }
    async sendLocation(params) {
        return this.rest
            .request("sendLocation", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendVenue(params) {
        return this.rest
            .request("sendVenue", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async forwardMessage(params) {
        return this.rest
            .request("forwardMessage", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async forwardMessages(params) {
        return this.rest
            .request("forwardMessages", toSnakeCase(params))
            .then((res) => res.map((msg) => msg.message_id));
    }
    async copyMessage(params) {
        return this.rest
            .request("copyMessage", toSnakeCase(params))
            .then((res) => res.message_id);
    }
    async copyMessages(params) {
        return this.rest
            .request("copyMessages", toSnakeCase(params))
            .then((res) => res.map((msg) => msg.message_id));
    }
    async sendContact(params) {
        return this.rest
            .request("sendContact", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendPoll(params) {
        return this.rest
            .request("sendPoll", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendDice(params) {
        return this.rest
            .request("sendDice", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async sendChatAction(params) {
        return this.rest.request("sendChatAction", toSnakeCase(params));
    }
    async readBusinessMessage(params) {
        return this.rest.request("readBusinessMessage", toSnakeCase(params));
    }
    async setMessageReaction(params) {
        return this.rest.request("setMessageReaction", toSnakeCase(params));
    }
    async getUserProfilePhotos(params) {
        return this.rest
            .request("getUserProfilePhotos", toSnakeCase(params))
            .then((res) => new index_1.UserProfilePhotos(this, res));
    }
    async setUserEmojiStatus(params) {
        return this.rest.request("setUserEmojiStatus", toSnakeCase(params));
    }
    async getFile(fileId) {
        const response = await this.rest.request("getFile", {
            file_id: fileId,
        });
        return new index_1.InputFile(this, response);
    }
    async kickChatMember(params) {
        return this.rest.request("kickChatMember", toSnakeCase(params));
    }
    async banChatMember(params) {
        return this.rest.request("banChatMember", toSnakeCase(params));
    }
    async unbanChatMember(params) {
        return this.rest.request("unbanChatMember", toSnakeCase(params));
    }
    async restrictChatMember(params) {
        const permissions = new ChatPermissions_1.ChatPermissions(params.permissions);
        return this.rest.request("restrictChatMember", {
            ...toSnakeCase(params),
            permissions: (0, ApiPermissions_1.toApiFormat)(permissions.toObject()),
        });
    }
    async promoteChatMember(params) {
        const permissions = new ChatPermissions_1.ChatPermissions(params.permissions);
        return this.rest.request("promoteChatMember", { ...toSnakeCase(params), ...(0, ApiPermissions_1.toApiFormat)(permissions.toObject()) });
    }
    async setChatAdministratorCustomTitle(params) {
        return this.rest.request("setChatAdministratorCustomTitle", toSnakeCase(params));
    }
    async banChatSenderChat(chatId, senderChatId) {
        return this.rest.request("banChatSenderChat", { chat_id: chatId, sender_chat_id: senderChatId });
    }
    async unbanChatSenderChat(chatId, senderChatId) {
        return this.rest.request("unbanChatSenderChat", { chat_id: chatId, sender_chat_id: senderChatId });
    }
    async setChatPermissions(params) {
        const permissions = new ChatPermissions_1.ChatPermissions(params.permissions);
        return this.rest.request("setChatPermissions", {
            ...toSnakeCase(params),
            permissions: (0, ApiPermissions_1.toApiFormat)(permissions.toObject()),
        });
    }
    async exportChatInviteLink(chatId) {
        return this.rest.request("exportChatInviteLink", { chat_id: chatId });
    }
    async createChatInviteLink(params) {
        return this.rest
            .request("createChatInviteLink", toSnakeCase(params))
            .then((res) => new index_1.ChatInviteLink(this, res));
    }
    async editChatInviteLink(params) {
        return this.rest
            .request("editChatInviteLink", toSnakeCase(params))
            .then((res) => new index_1.ChatInviteLink(this, res));
    }
    async createChatSubscriptionInviteLink(params) {
        return this.rest
            .request("createChatSubscriptionInviteLink", toSnakeCase(params))
            .then((res) => new index_1.ChatInviteLink(this, res));
    }
    async editChatSubscriptionInviteLink(params) {
        return this.rest
            .request("editChatSubscriptionInviteLink", toSnakeCase(params))
            .then((res) => new index_1.ChatInviteLink(this, res));
    }
    async revokeChatInviteLink(inviteLink, chatId) {
        return this.rest
            .request("revokeChatInviteLink", { invite_link: inviteLink, ...(chatId && { chat_id: chatId }) })
            .then((res) => new index_1.ChatInviteLink(this, res));
    }
    async approveChatJoinRequest(userId, chatId) {
        return this.rest.request("approveChatJoinRequest", {
            ...(chatId && { chat_id: chatId }),
            user_id: userId,
        });
    }
    async declineChatJoinRequest(chatId, userId) {
        return this.rest.request("declineChatJoinRequest", { chat_id: chatId, user_id: userId });
    }
    async setChatPhoto(chatId, photo) {
        return this.rest.request("setChatPhoto", { chat_id: chatId, photo });
    }
    async deleteChatPhoto(chatId) {
        return this.rest.request("deleteChatPhoto", { chat_id: chatId });
    }
    async setChatTitle(chatId, title) {
        return this.rest.request("setChatTitle", { chat_id: chatId, title });
    }
    async setChatDescription(chatId, description) {
        return this.rest.request("setChatDescription", {
            chat_id: chatId,
            ...(description && { description }),
        });
    }
    async pinChatMessage(params) {
        return this.rest.request("pinChatMessage", toSnakeCase(params));
    }
    async unpinChatMessage(params) {
        return this.rest.request("unpinChatMessage", toSnakeCase(params));
    }
    async unpinAllChatMessages(chatId) {
        return this.rest.request("unpinAllChatMessages", { chat_id: chatId });
    }
    async leaveChat(chatId) {
        return this.rest.request("leaveChat", {
            chat_id: chatId,
        });
    }
    async getChat(chatId) {
        return this.rest
            .request("getChat", {
            chat_id: chatId,
        })
            .then((res) => new index_1.ChatFullInfo(this, res));
    }
    async getChatAdministrators(chatId) {
        return this.rest
            .request("getChatAdministrators", { chat_id: chatId })
            .then((res) => res.map((user) => new index_1.ChatMember(this, chatId, user)));
    }
    async getChatMemberCount(chatId) {
        return this.rest.request("getChatMemberCount", { chat_id: chatId });
    }
    async getUserChatBoosts(chatId, userId) {
        return this.rest
            .request("getUserChatBoosts", { chat_id: chatId, user_id: userId })
            .then((res) => new index_1.UserChatBoosts(this, res));
    }
    async getBusinessConnection(businessConnectionId) {
        return this.rest
            .request("getBusinessConnection", { business_connection_id: businessConnectionId })
            .then((res) => new index_1.BusinessConnection(this, res));
    }
    async getChatMember(chatId, userId) {
        return this.rest
            .request("getChatMember", { chat_id: chatId, user_id: userId })
            .then((res) => new index_1.ChatMember(this, chatId, res));
    }
    async setChatStickerSet(stickerSetName, chatId) {
        return this.rest.request("setChatStickerSet", { sticker_set_name: stickerSetName, ...(chatId && { chat_id: chatId }) });
    }
    async deleteChatStickerSet(chatId) {
        return this.rest.request("deleteChatStickerSet", { ...(chatId && { chat_id: chatId }) });
    }
    async getForumTopicIconStickers() {
        return this.rest
            .request("getForumTopicIconStickers")
            .then((res) => res.map((sticker) => new index_1.Sticker(this, sticker)));
    }
    async createForumTopic(params) {
        return this.rest
            .request("createForumTopic", toSnakeCase(params))
            .then((res) => new index_1.ForumTopic(this, res.message_thread_id, params.chatId, res));
    }
    async editForumTopic(params) {
        return this.rest.request("editForumTopic", toSnakeCase(params));
    }
    async closeForumTopic(chatId, messageThreadId) {
        return this.rest.request("closeForumTopic", { chat_id: chatId, message_thread_id: messageThreadId });
    }
    async reopenForumTopic(chatId, messageThreadId) {
        return this.rest.request("reopenForumTopic", { chat_id: chatId, message_thread_id: messageThreadId });
    }
    async deleteForumTopic(chatId, messageThreadId) {
        return this.rest.request("deleteForumTopic", { chat_id: chatId, message_thread_id: messageThreadId });
    }
    async unpinAllForumTopicMessages(chatId, messageThreadId) {
        return this.rest.request("unpinAllForumTopicMessages", {
            chat_id: chatId,
            message_thread_id: messageThreadId,
        });
    }
    async editGeneralForumTopic(chatId, name) {
        return this.rest.request("editGeneralForumTopic", { chat_id: chatId, name });
    }
    async closeGeneralForumTopic(chatId) {
        return this.rest.request("closeGeneralForumTopic", { chat_id: chatId });
    }
    async reopenGeneralForumTopic(chatId) {
        return this.rest.request("reopenGeneralForumTopic", { chat_id: chatId });
    }
    async hideGeneralForumTopic(chatId) {
        return this.rest.request("hideGeneralForumTopic", { chat_id: chatId });
    }
    async unhideGeneralForumTopic(chatId) {
        return this.rest.request("unhideGeneralForumTopic", { chat_id: chatId });
    }
    async unpinAllGeneralForumTopicMessages(chatId) {
        return this.rest.request("unpinAllGeneralForumTopicMessages", { chat_id: chatId });
    }
    async answerCallbackQuery(params) {
        return this.rest.request("answerCallbackQuery", toSnakeCase(params));
    }
    async setMyCommands(params) {
        return this.rest.request("setMyCommands", toSnakeCase(params));
    }
    async deleteMyCommands(scope, languageCode) {
        return this.rest.request("deleteMyCommands", {
            ...(scope && { scope }),
            ...(languageCode && { language_code: languageCode }),
        });
    }
    async getMyCommands(scope, languageCode) {
        return this.rest.request("getMyCommands", {
            ...(scope && { scope }),
            ...(languageCode && { language_code: languageCode }),
        });
    }
    async setMyName(name, languageCode) {
        return this.rest.request("setMyName", {
            ...(name && { name }),
            ...(languageCode && { language_code: languageCode }),
        });
    }
    async getMyName(languageCode) {
        return this.rest
            .request("getMyName", {
            ...(languageCode && { language_code: languageCode }),
        })
            .then((res) => res.name);
    }
    async setMyDescription(description, languageCode) {
        return this.rest.request("setMyDescription", {
            ...(description && { description }),
            ...(languageCode && { language_code: languageCode }),
        });
    }
    async getMyDescription(languageCode) {
        return this.rest
            .request("getMyDescription", { ...(languageCode && { language_code: languageCode }) })
            .then((res) => res.description);
    }
    async setMyShortDescription(shortDescription, languageCode) {
        return this.rest.request("setMyShortDescription", {
            ...(shortDescription && { short_description: shortDescription }),
            ...(languageCode && { language_code: languageCode }),
        });
    }
    async getMyShortDescription(languageCode) {
        return this.rest
            .request("getMyShortDescription", { ...(languageCode && { language_code: languageCode }) })
            .then((res) => res.short_description);
    }
    async setChatMenuButton(chatId, menuButton) {
        return this.rest.request("setChatMenuButton", {
            ...(chatId && { chat_id: chatId }),
            ...(menuButton && { menu_button: menuButton }),
        });
    }
    async getChatMenuButton(chatId) {
        return this.rest
            .request("getChatMenuButton", { ...(chatId && { chat_id: chatId }) })
            .then((res) => new index_1.MenuButton(res));
    }
    async setMyDefaultAdministratorRights(rights, forChannels) {
        const permissions = new ChatPermissions_1.ChatPermissions((rights || {}));
        return this.rest.request("setMyDefaultAdministratorRights", {
            ...(rights && { rights: (0, ApiPermissions_1.toApiFormat)(permissions.toObject()) }),
            ...(typeof forChannels === "boolean" && { for_channels: forChannels }),
        });
    }
    async getMyDefaultAdministratorRights(forChannels) {
        return this.rest
            .request("getMyDefaultAdministratorRights", { ...(typeof forChannels === "boolean" && { for_channels: forChannels }) })
            .then((res) => new index_1.ChatAdministratorRights(res));
    }
    async setBusinessAccountName(params) {
        return this.rest.request("setBusinessAccountName", toSnakeCase(params));
    }
    async setBusinessAccountUsername(businessConnectionId, username) {
        return this.rest.request("setBusinessAccountUsername", {
            business_connection_id: businessConnectionId,
            ...(username && { username }),
        });
    }
    async setBusinessAccountBio(businessConnectionId, bio) {
        return this.rest.request("setBusinessAccountBio", {
            business_connection_id: businessConnectionId,
            ...(bio && { bio }),
        });
    }
    async setBusinessAccountProfilePhoto(params) {
        return this.rest.request("setBusinessAccountProfilePhoto", toSnakeCase(params));
    }
    async removeBusinessAccountProfilePhoto(businessConnectionId, isPublic) {
        return this.rest.request("removeBusinessAccountProfilePhoto", {
            business_connection_id: businessConnectionId,
            ...(typeof isPublic !== "undefined" && { is_public: isPublic }),
        });
    }
    async setBusinessAccountGiftSettings(params) {
        return this.rest.request("setBusinessAccountGiftSettings", toSnakeCase(params));
    }
    async getBusinessAccountStarBalance(businessConnectionId) {
        return this.rest
            .request("getBusinessAccountStarBalance", { business_connection_id: businessConnectionId })
            .then((res) => new index_1.StarAmount(res));
    }
    async getBusinessAccountGifts(params) {
        return this.rest
            .request("getBusinessAccountGifts", toSnakeCase(params))
            .then((res) => new index_1.OwnedGifts(this, res));
    }
    async convertGiftToStars(businessConnectionId, ownedGiftId) {
        return this.rest.request("convertGiftToStars", {
            business_connection_id: businessConnectionId,
            owned_gift_id: ownedGiftId,
        });
    }
    async upgradeGift(params) {
        return this.rest.request("upgradeGift", toSnakeCase(params));
    }
    async transferGift(params) {
        return this.rest.request("transferGift", toSnakeCase(params));
    }
    async editMessageText(params) {
        return this.rest
            .request("editMessageText", toSnakeCase(params))
            .then((res) => {
            if (typeof res === "boolean")
                return res;
            return new index_1.Message(this, res);
        });
    }
    async editMessageCaption(params) {
        return this.rest
            .request("editMessageCaption", toSnakeCase(params))
            .then((res) => {
            if (typeof res === "boolean")
                return res;
            return new index_1.Message(this, res);
        });
    }
    async editMessageMedia(params) {
        return this.rest
            .request("editMessageMedia", toSnakeCase(params))
            .then((res) => {
            if (typeof res === "boolean")
                return res;
            return new index_1.Message(this, res);
        });
    }
    async editMessageLiveLocation(params) {
        return this.rest
            .request("editMessageLiveLocation", toSnakeCase(params))
            .then((res) => (typeof res === "boolean"
            ? res
            : new index_1.Message(this, res)));
    }
    async stopMessageLiveLocation(params) {
        return this.rest
            .request("stopMessageLiveLocation", toSnakeCase(params))
            .then((res) => (typeof res === "boolean"
            ? res
            : new index_1.Message(this, res)));
    }
    async editMessageReplyMarkup(params) {
        return this.rest
            .request("editMessageReplyMarkup", toSnakeCase(params))
            .then((res) => {
            if (typeof res === "boolean")
                return res;
            return new index_1.Message(this, res);
        });
    }
    async stopPoll(params) {
        return this.rest
            .request("stopPoll", toSnakeCase(params))
            .then((res) => new index_1.Poll(this, res));
    }
    async sendSticker(params) {
        return this.rest
            .request("sendSticker", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async getStickerSet(name) {
        return this.rest
            .request("getStickerSet", { name })
            .then((res) => new index_1.StickerSet(this, res));
    }
    async getCustomEmojiStickers(customEmojiIds) {
        return this.rest
            .request("getCustomEmojiStickers", { custom_emoji_ids: customEmojiIds })
            .then((res) => res.map((sticker) => new index_1.Sticker(this, sticker)));
    }
    async uploadStickerFile(params) {
        const response = await this.rest.request("uploadStickerFile", toSnakeCase(params));
        return new index_1.InputFile(this, response);
    }
    async createNewStickerSet(params) {
        return this.rest.request("createNewStickerSet", toSnakeCase(params));
    }
    async addStickerToSet(params) {
        return this.rest.request("addStickerToSet", toSnakeCase(params));
    }
    async replaceStickerInSet(params) {
        return this.rest.request("replaceStickerInSet", toSnakeCase(params));
    }
    async setStickerPositionInSet(sticker, position) {
        return this.rest.request("setStickerPositionInSet", { sticker, position });
    }
    async deleteStickerFromSet(sticker) {
        return this.rest.request("deleteStickerFromSet", { sticker });
    }
    async setStickerEmojiList(sticker, emojiList) {
        return this.rest.request("setStickerEmojiList", { sticker, emoji_list: emojiList });
    }
    async setStickerKeywords(sticker, keywords) {
        return this.rest.request("setStickerKeywords", { sticker, ...(keywords && { keywords }) });
    }
    async setStickerMaskPosition(sticker, maskPosition) {
        return this.rest.request("setStickerMaskPosition", {
            sticker,
            ...(maskPosition && { mask_position: maskPosition }),
        });
    }
    async setStickerSetTitle(name, title) {
        return this.rest.request("setStickerSetTitle", { name, title });
    }
    async setStickerSetThumbnail(params) {
        return this.rest.request("setStickerSetThumbnail", toSnakeCase(params));
    }
    async setCustomEmojiStickerSetThumbnail(name, customEmojiId) {
        return this.rest.request("setCustomEmojiStickerSetThumbnail", {
            name,
            ...(customEmojiId && { custom_emoji_id: customEmojiId }),
        });
    }
    async postStory(args) {
        return this.rest
            .request("postStory", toSnakeCase(args))
            .then((res) => new index_1.Story(this, res));
    }
    async editStory(args) {
        return this.rest
            .request("editStory", toSnakeCase(args))
            .then((res) => new index_1.Story(this, res));
    }
    async deleteStory(businessConnectionId, storyId) {
        return this.rest.request("deleteStory", {
            business_connection_id: businessConnectionId,
            story_id: storyId,
        });
    }
    async getAvailableGifts() {
        return this.rest
            .request("getAvailableGifts")
            .then((res) => new index_1.Gifts(this, res));
    }
    async sendGift(params) {
        return this.rest.request("sendGift", toSnakeCase(params));
    }
    async giftPremiumSubscription(args) {
        return this.rest.request("giftPremiumSubscription", toSnakeCase(args));
    }
    async transferBusinessAccountStars(businessConnectionId, starCount) {
        return this.rest.request("transferBusinessAccountStars", {
            business_connection_id: businessConnectionId,
            star_count: starCount,
        });
    }
    async deleteStickerSet(name) {
        return this.rest.request("deleteStickerSet", { name });
    }
    async answerInlineQuery(params) {
        return this.rest.request("answerInlineQuery", toSnakeCase(params));
    }
    async answerWebAppQuery(webAppQueryId, result) {
        return this.rest
            .request("answerWebAppQuery", { web_app_query_id: webAppQueryId, result })
            .then((res) => res.inline_message_id);
    }
    async savePreparedInlineMessage(params) {
        return this.rest
            .request("savePreparedInlineMessage", toSnakeCase(params))
            .then((res) => new index_1.PreparedInlineMessage(res));
    }
    async sendInvoice(params) {
        return this.rest
            .request("sendInvoice", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async createInvoiceLink(params) {
        return this.rest.request("createInvoiceLink", toSnakeCase(params));
    }
    async editUserStarSubscription(params) {
        return this.rest.request("editUserStarSubscription", toSnakeCase(params));
    }
    async verifyUser(userId, description) {
        return this.rest.request("verifyUser", {
            user_id: userId,
            ...(description && { custom_description: description }),
        });
    }
    async verifyChat(chatId, description) {
        return this.rest.request("verifyChat", {
            chat_id: chatId,
            ...(description && { custom_description: description }),
        });
    }
    async removeUserVerification(userId) {
        return this.rest.request("removeUserVerification", { user_id: userId });
    }
    async removeChatVerification(chatId) {
        return this.rest.request("removeChatVerification", { chat_id: chatId });
    }
    async answerShippingQuery(params) {
        return this.rest.request("answerShippingQuery", toSnakeCase(params));
    }
    async answerPreCheckoutQuery(params) {
        return this.rest.request("answerPreCheckoutQuery", toSnakeCase(params));
    }
    async getStarTransactions(offset, limit) {
        return this.rest
            .request("getStarTransactions", {
            offset,
            limit,
        })
            .then((res) => new index_1.StarTransactions(this, res));
    }
    async refundStarPayment(userId, telegramPaymentChargeId) {
        return this.rest.request("refundStarPayment", {
            user_id: userId,
            telegram_payment_charge_id: telegramPaymentChargeId,
        });
    }
    async setPassportDataErrors(userId, errors) {
        return this.rest.request("setPassportDataErrors", { user_id: userId, errors });
    }
    async sendGame(params) {
        return this.rest
            .request("sendGame", toSnakeCase(params))
            .then((res) => new index_1.Message(this, res));
    }
    async setGameScore(params) {
        return this.rest
            .request("setGameScore", toSnakeCase(params))
            .then((res) => (typeof res === "boolean"
            ? res
            : new index_1.Message(this, res)));
    }
    async getGameHighScores(params) {
        return this.rest
            .request("getGameHighScores", toSnakeCase(params))
            .then((res) => res.map((game) => new index_1.GameHighScore(this, game)));
    }
    async deleteMessage(chatId, messageId) {
        return this.rest.request("deleteMessage", { chat_id: chatId, message_id: messageId });
    }
    async deleteMessages(chatId, messageIds) {
        return this.rest.request("deleteMessages", { chat_id: chatId, message_ids: messageIds });
    }
    async deleteBusinessMessages(businessConnectionId, messageIds) {
        return this.rest.request("deleteBusinessMessages", { business_connection_id: businessConnectionId, message_ids: messageIds });
    }
}
exports.BaseClient = BaseClient;
