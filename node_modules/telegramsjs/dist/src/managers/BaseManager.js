"use strict";
var _BaseManager_holds, _BaseManager_apiClient, _BaseManager_cacheWarningEmitted;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseManager = void 0;
const tslib_1 = require("tslib");
const collection_1 = require("@telegram.ts/collection");
class BaseManager {
    constructor(client, holds, iterable, options) {
        var _a;
        _BaseManager_holds.set(this, void 0);
        _BaseManager_apiClient.set(this, void 0);
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cacheSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cacheFilter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _BaseManager_cacheWarningEmitted.set(this, false);
        tslib_1.__classPrivateFieldSet(this, _BaseManager_holds, holds, "f");
        tslib_1.__classPrivateFieldSet(this, _BaseManager_apiClient, client, "f");
        this.cacheSize = (_a = options.cacheSize) !== null && _a !== void 0 ? _a : -1;
        if (options.cacheFilter) {
            this.cacheFilter = options.cacheFilter;
        }
        this.cache = new collection_1.Collection();
        if (iterable) {
            for (const item of iterable) {
                this._add(item);
            }
        }
    }
    get client() {
        return tslib_1.__classPrivateFieldGet(this, _BaseManager_apiClient, "f");
    }
    _add(data, cache = true, { id, extras = [] } = {}) {
        var _a;
        if (this.cacheSize !== -1 && this.cacheSize < this.cache.size) {
            if (!tslib_1.__classPrivateFieldGet(this, _BaseManager_cacheWarningEmitted, "f")) {
                tslib_1.__classPrivateFieldSet(this, _BaseManager_cacheWarningEmitted, true, "f");
                process.emitWarning(`Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality`);
            }
            return new (tslib_1.__classPrivateFieldGet(this, _BaseManager_holds, "f"))(this.client, data);
        }
        const existing = this.cache.get(String(id !== null && id !== void 0 ? id : data.id));
        if (existing) {
            if (cache) {
                existing._patch(data);
                return existing;
            }
            const clone = existing._clone();
            clone._patch(data);
            return clone;
        }
        const entry = new (tslib_1.__classPrivateFieldGet(this, _BaseManager_holds, "f"))(this.client, data, ...extras);
        if (cache) {
            if (this.cacheFilter) {
                if ((_a = this.cacheFilter) === null || _a === void 0 ? void 0 : _a.call(this, entry)) {
                    this.cache.set(String(id !== null && id !== void 0 ? id : entry.valueOf()), entry);
                    return entry;
                }
                else
                    return entry;
            }
            this.cache.set(String(id !== null && id !== void 0 ? id : entry.valueOf()), entry);
        }
        return entry;
    }
    remove(id) {
        return this.cache.delete(id);
    }
    resolve(idOrInstance) {
        if (!idOrInstance)
            return null;
        if (idOrInstance instanceof tslib_1.__classPrivateFieldGet(this, _BaseManager_holds, "f"))
            return idOrInstance;
        if (typeof idOrInstance === "string") {
            return this.cache.get(idOrInstance) || null;
        }
        return null;
    }
    resolveId(idOrInstance) {
        if (!idOrInstance)
            return null;
        if (idOrInstance instanceof tslib_1.__classPrivateFieldGet(this, _BaseManager_holds, "f"))
            return idOrInstance.valueOf();
        if (typeof idOrInstance === "string")
            return idOrInstance;
        return null;
    }
    *[(_BaseManager_holds = new WeakMap(), _BaseManager_apiClient = new WeakMap(), _BaseManager_cacheWarningEmitted = new WeakMap(), Symbol.iterator)]() {
        for (const item of this.cache) {
            yield item;
        }
    }
}
exports.BaseManager = BaseManager;
