"use strict";
const { Base } = require("../Base");
const { BusinessPermissions, } = require("../../util/permission/BusinessPermissions");
class BusinessConnection extends Base {
    constructor(client, data) {
        super(client);
        this.id = data.id;
        this.user = this.client.users._add(data.user);
        this.userChatId = String(data.user_chat_id);
        this.createdUnixTime = data.date;
        if (data.rights) {
            const permissions = {};
            if ("can_reply" in data.rights) {
                permissions.canReply = data.rights.can_reply;
            }
            if ("can_read_messages" in data.rights) {
                permissions.readMessages = data.rights.can_read_messages;
            }
            if ("can_delete_outgoing_messages" in data.rights) {
                permissions.deleteOutgoingMessages =
                    data.rights.can_delete_outgoing_messages;
            }
            if ("can_delete_all_messages" in data.rights) {
                permissions.deleteAllMessages = data.rights.can_delete_all_messages;
            }
            if ("can_edit_name" in data.rights) {
                permissions.editName = data.rights.can_edit_name;
            }
            if ("can_edit_bio" in data.rights) {
                permissions.editBio = data.rights.can_edit_bio;
            }
            if ("can_edit_profile_photo" in data.rights) {
                permissions.editProfilePhoto = data.rights.can_edit_profile_photo;
            }
            if ("can_edit_username" in data.rights) {
                permissions.editUsername = data.rights.can_edit_username;
            }
            if ("can_change_gift_settings" in data.rights) {
                permissions.changeGiftSettings = data.rights.can_change_gift_settings;
            }
            if ("can_view_gifts_and_stars" in data.rights) {
                permissions.viewGiftsAndStars = data.rights.can_view_gifts_and_stars;
            }
            if ("can_convert_gifts_to_stars" in data.rights) {
                permissions.convertGiftsToStars =
                    data.rights.can_convert_gifts_to_stars;
            }
            if ("can_transfer_and_upgrade_gifts" in data.rights) {
                permissions.transferAndUpgradeGifts =
                    data.rights.can_transfer_and_upgrade_gifts;
            }
            if ("can_transfer_stars" in data.rights) {
                permissions.transferStars = data.rights.can_transfer_stars;
            }
            if ("can_manage_stories" in data.rights) {
                permissions.manageStories = data.rights.can_manage_stories;
            }
            this.permissions = new BusinessPermissions(permissions);
        }
        this.enabled = data.is_enabled;
    }
    get createdTimestamp() {
        return this.createdUnixTime * 1000;
    }
    get createdAt() {
        return new Date(this.createdTimestamp);
    }
    send(text, options = {}) {
        if (typeof text === "object") {
            return this.client.sendMediaGroup({
                chatId: this.userChatId,
                ...text,
            });
        }
        return this.client.sendMessage({
            text,
            chatId: this.userChatId,
            ...options,
        });
    }
    readMessage(messageId, chatId = this.user.id) {
        return this.client.readBusinessMessage({
            businessConnectionId: this.id,
            messageId,
            chatId,
        });
    }
    postStory(content, activePeriod, options = {}) {
        return this.client.postStory({
            ...options,
            businessConnectionId: this.id,
            content,
            activePeriod,
        });
    }
    sendGift(giftId, options = {}) {
        return this.client.sendGift({
            giftId,
            userId: this.userChatId,
            ...options,
        });
    }
    giftPremiumSubscription(monthCount, starCount, options = {}) {
        return this.client.giftPremiumSubscription({
            ...options,
            monthCount,
            starCount,
            userId: this.userChatId,
        });
    }
    saveInlineMessage(result, options = {}) {
        return this.client.savePreparedInlineMessage({
            result,
            userId: this.userChatId,
            ...options,
        });
    }
    setStarSubscription(telegramPaymentChargeId, isCanceled) {
        return this.client.editUserStarSubscription({
            userId: this.userChatId,
            telegramPaymentChargeId,
            isCanceled,
        });
    }
    setEmojiStatus({ emojiStatusCustomEmojiId, emojiStatusExpirationDate } = {}) {
        return this.client.setUserEmojiStatus({
            userId: this.userChatId,
            ...(emojiStatusCustomEmojiId && { emojiStatusCustomEmojiId }),
            ...(emojiStatusExpirationDate && { emojiStatusExpirationDate }),
        });
    }
    setAccountName(firstName, lastName) {
        return this.client.setBusinessAccountName({
            businessConnectionId: this.id,
            firstName,
            ...(lastName && { lastName }),
        });
    }
    setAccountUsername(username) {
        return this.client.setBusinessAccountUsername(this.id, username);
    }
    setAccountBio(bio) {
        return this.client.setBusinessAccountBio(this.id, bio);
    }
    setAccountProfilePhoto(photo, isPublic) {
        return this.client.setBusinessAccountProfilePhoto({
            businessConnectionId: this.id,
            photo,
            ...(typeof isPublic !== "undefined" && { isPublic }),
        });
    }
    deleteAccountProfilePhoto(isPublic) {
        return this.client.removeBusinessAccountProfilePhoto(this.id, isPublic);
    }
    setAccountGiftSettings(showGiftButton, acceptedGiftTypes) {
        return this.client.setBusinessAccountGiftSettings({
            businessConnectionId: this.id,
            showGiftButton,
            acceptedGiftTypes,
        });
    }
    fetchAccountStarBalance() {
        return this.client.getBusinessAccountStarBalance(this.id);
    }
    fetchAccountGifts(options = {}) {
        return this.client.getBusinessAccountGifts({
            ...options,
            businessConnectionId: this.id,
        });
    }
    convertGiftsToStars(ownedGiftId) {
        return this.client.convertGiftToStars(this.id, ownedGiftId);
    }
    upgradeGift(ownedGiftId, options = {}) {
        return this.client.upgradeGift({
            ...options,
            ownedGiftId,
            businessConnectionId: this.id,
        });
    }
    transferGift(options) {
        return this.client.transferGift({
            ...options,
            businessConnectionId: this.id,
        });
    }
    transferAccountStars(starCount) {
        return this.client.transferBusinessAccountStars(this.id, starCount);
    }
    deleteMessages(messageIds) {
        return this.client.deleteBusinessMessages(this.id, messageIds);
    }
    verify(description) {
        return this.client.verifyUser(this.userChatId, description);
    }
    removeVerification() {
        return this.client.removeUserVerification(this.userChatId);
    }
}
module.exports = { BusinessConnection };
