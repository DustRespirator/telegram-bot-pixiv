"use strict";
const { Base } = require("../Base");
const { Gift } = require("../gift/Gift");
const { PaidMedia } = require("../media/paid/PaidMedia");
const { AffiliateInfo } = require("./AffiliateInfo");
const { RevenueWithdrawalState } = require("./RevenueWithdrawalState");
class TransactionPartner extends Base {
    constructor(client, data) {
        super(client);
        this.type = data.type;
        if ("transaction_type" in data) {
            this.transactionType = data.transaction_type;
        }
        this._patch(data);
    }
    _patch(data) {
        if ("withdrawal_state" in data) {
            this.withdrawal = new RevenueWithdrawalState(data.withdrawal_state);
        }
        if ("user" in data) {
            this.user = this.client.users._add(data.user);
        }
        if ("paid_media" in data) {
            this.paidMedia = data.paid_media.map((media) => new PaidMedia(this.client, media));
        }
        if ("paid_media_payload" in data) {
            this.paidMediaPayload = data.paid_media_payload;
        }
        if ("invoice_payload" in data) {
            this.payload = data.invoice_payload;
        }
        if ("subscription_period" in data) {
            this.subscriptionPeriod = data.subscription_period;
        }
        if ("request_count" in data) {
            this.requestCount = data.request_count;
        }
        if ("gift" in data) {
            this.gift = new Gift(this.client, data.gift);
        }
        if ("chat" in data) {
            this.chat = this.client.chats._add(data.chat);
        }
        if ("affiliate" in data) {
            this.affiliate = new AffiliateInfo(this.client, data.affiliate);
        }
        if ("sponsor_user" in data) {
            this.sponsorUser = this.client.users._add(data.sponsor_user);
        }
        if ("commission_per_mille" in data) {
            this.commissionRate = data.commission_per_mille;
        }
        if ("premium_subscription_duration" in data) {
            this.premiumSubscriptionDuration = data.premium_subscription_duration;
        }
        return data;
    }
    isUser() {
        return Boolean("user" in this && this.user);
    }
    isChat() {
        return Boolean("chat" in this && this.chat);
    }
    isFragment() {
        return Boolean("withdrawal" in this && this.withdrawal);
    }
    isTelegramApi() {
        return Boolean("requestCount" in this && this.requestCount !== undefined);
    }
    isAffiliateProgram() {
        return Boolean("commissionRate" in this && this.commissionRate !== undefined);
    }
}
module.exports = { TransactionPartner };
