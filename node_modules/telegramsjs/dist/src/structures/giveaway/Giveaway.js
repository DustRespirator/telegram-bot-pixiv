"use strict";
const { Base } = require("../Base");
const { Collection } = require("@telegram.ts/collection");
class Giveaway extends Base {
    constructor(client, data) {
        super(client);
        this.chats = new Collection(data.chats.map((chat) => [String(chat.id), this.client.chats._add(chat)]));
        this.selectedUnixTime = data.winners_selection_date;
        this.winnerCount = data.winner_count;
        if ("only_new_members" in data) {
            this.onlyNewMembers = data.only_new_members;
        }
        if ("has_public_winners" in data) {
            this.publicWinners = data.has_public_winners;
        }
        if ("prize_description" in data) {
            this.description = data.prize_description;
        }
        if ("prize_star_count" in data) {
            this.starCount = data.prize_star_count;
        }
        if ("country_codes" in data) {
            this.countryCodes = data.country_codes;
        }
        if ("premium_subscription_month_count" in data) {
            this.subscriptionMonthCount = data.premium_subscription_month_count;
        }
    }
    get selectedTimestamp() {
        return this.selectedUnixTime * 1000;
    }
    get selectedAt() {
        return new Date(this.selectedTimestamp);
    }
    equals(other) {
        var _a, _b, _c, _d;
        if (!other || !(other instanceof Giveaway))
            return false;
        const thisChats = Array.from(this.chats).map(([_, chat]) => chat);
        const otherChats = Array.from(other.chats).map(([_, chat]) => chat);
        return Boolean(this.selectedUnixTime === other.selectedUnixTime &&
            this.winnerCount === other.winnerCount &&
            this.onlyNewMembers === other.onlyNewMembers &&
            this.publicWinners === other.publicWinners &&
            this.description === other.description &&
            this.starCount === other.starCount &&
            this.subscriptionMonthCount === other.subscriptionMonthCount &&
            ((_a = this.countryCodes) === null || _a === void 0 ? void 0 : _a.length) === ((_b = other.countryCodes) === null || _b === void 0 ? void 0 : _b.length) &&
            ((_d = (_c = this.countryCodes) === null || _c === void 0 ? void 0 : _c.every) === null || _d === void 0 ? void 0 : _d.call(_c, (code, index) => { var _a; return code === ((_a = other.countryCodes) === null || _a === void 0 ? void 0 : _a[index]); })) &&
            thisChats.length === otherChats.length &&
            thisChats.every((chat, index) => otherChats[index] && chat.equals(otherChats[index])));
    }
}
module.exports = { Giveaway };
