"use strict";
const { Base } = require("../Base");
const { Collection } = require("@telegram.ts/collection");
class GiveawayWinners extends Base {
    constructor(client, data) {
        super(client);
        this.chat = this.client.chats._add(data.chat);
        this.messageId = String(data.giveaway_message_id);
        this.selectionUnixTime = data.winners_selection_date;
        this.count = data.winner_count;
        this.winners = new Collection(data.winners.map((user) => [
            String(user.id),
            this.client.users._add(user),
        ]));
        this._patch(data);
    }
    _patch(data) {
        if ("additional_chat_count" in data) {
            this.addChatCount = data.additional_chat_count;
        }
        if ("prize_star_count" in data) {
            this.starCount = data.prize_star_count;
        }
        if ("premium_subscription_month_count" in data) {
            this.subscriptionMonthCount = data.premium_subscription_month_count;
        }
        if ("unclaimed_prize_count" in data) {
            this.unclaimedPrizeCount = data.unclaimed_prize_count;
        }
        if ("only_new_members" in data) {
            this.onlyNewMembers = data.only_new_members;
        }
        if ("was_refunded" in data) {
            this.refunded = data.was_refunded;
        }
        if ("prize_description" in data) {
            this.description = data.prize_description;
        }
        return data;
    }
    get selectionTimestamp() {
        return this.selectionUnixTime * 1000;
    }
    get selectionAt() {
        return new Date(this.selectionTimestamp);
    }
    equals(other) {
        if (!other || !(other instanceof GiveawayWinners))
            return false;
        const thisWinners = Array.from(this.winners).map(([_, winner]) => winner);
        const otherWinners = Array.from(other.winners).map(([_, winner]) => winner);
        return (this.messageId === other.messageId &&
            this.selectionUnixTime === other.selectionUnixTime &&
            this.count === other.count &&
            this.addChatCount === other.addChatCount &&
            this.starCount === other.starCount &&
            this.subscriptionMonthCount === other.subscriptionMonthCount &&
            this.unclaimedPrizeCount === other.unclaimedPrizeCount &&
            this.onlyNewMembers === other.onlyNewMembers &&
            this.refunded === other.refunded &&
            this.description === other.description &&
            thisWinners.length === otherWinners.length &&
            thisWinners.every((winner, index) => otherWinners[index] && winner.equals(otherWinners[index])) &&
            this.chat.equals(other.chat));
    }
    *[Symbol.iterator]() {
        for (const [_, winner] of this.winners) {
            yield winner;
        }
    }
}
module.exports = { GiveawayWinners };
