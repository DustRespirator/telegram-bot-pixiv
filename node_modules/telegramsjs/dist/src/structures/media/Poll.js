"use strict";
const { Base } = require("../Base");
const { MessageEntities } = require("../message/MessageEntities");
class Poll extends Base {
    constructor(client, data) {
        super(client);
        this.id = data.id;
        this.question = data.question;
        this.totalVoterCount = data.total_voter_count;
        this.closed = data.is_closed;
        this.anonymous = Boolean(data.is_anonymous);
        this.type = data.type;
        this.allowAnswers = data.allows_multiple_answers;
        this._patch(data);
    }
    _patch(data) {
        if ("question_entities" in data) {
            this.questionEntities = new MessageEntities(this.client, this.question, data.question_entities);
        }
        if ("options" in data) {
            const options = [];
            if (Array.isArray(data.options)) {
                for (const opts of data.options) {
                    const result = {};
                    result.text = opts.text;
                    if ("text_entities" in opts) {
                        result.entities = new MessageEntities(this.client, opts.text, opts.text_entities);
                    }
                    result.voterCount = opts.voter_count;
                    options.push(result);
                }
            }
            this.options = options;
        }
        if ("correct_option_id" in data) {
            this.correctId = data.correct_option_id;
        }
        if ("explanation" in data) {
            this.explanation = data.explanation;
            if ("explanation_entities" in data) {
                this.explanationEntities = new MessageEntities(this.client, data.explanation, data.explanation_entities);
            }
        }
        if ("open_period" in data) {
            this.openPeriod = data.open_period;
        }
        if ("close_date" in data) {
            this.closeUnixTime = data.close_date;
        }
        return data;
    }
    get closeTimestamp() {
        return this.closeUnixTime ? this.closeUnixTime * 1000 : null;
    }
    get closedAt() {
        return this.closeTimestamp ? new Date(this.closeTimestamp) : null;
    }
    close(chatId, messageId, { businessConnectionId, replyMarkup } = {}) {
        return this.client.stopPoll({
            chatId,
            messageId,
            ...(businessConnectionId && { businessConnectionId }),
            ...(replyMarkup && { replyMarkup }),
        });
    }
}
module.exports = { Poll };
