"use strict";
var _Chat_chatType;
const tslib_1 = require("tslib");
const { Base } = require("../Base");
const { MessageCollector } = require("../../util/collector/MessageCollector");
const { ReactionCollector } = require("../../util/collector/ReactionCollector");
const { InlineKeyboardCollector, } = require("../../util/collector/InlineKeyboardCollector");
const { CollectorEvents, ReactionCollectorEvents, } = require("../../util/Constants");
const { UserPermissions } = require("../../util/permission/UserPermissions");
const { TelegramError } = require("../../errors/TelegramError");
const { ErrorCodes } = require("../../errors/ErrorCodes");
class Chat extends Base {
    constructor(client, data) {
        super(client);
        _Chat_chatType.set(this, void 0);
        this.id = String(data.id);
        tslib_1.__classPrivateFieldSet(this, _Chat_chatType, data.type, "f");
        this._patch(data);
    }
    _patch(data) {
        if ("title" in data) {
            this.title = data.title;
        }
        if ("username" in data) {
            this.username = data.username;
        }
        if ("first_name" in data) {
            this.firstName = data.first_name;
        }
        if ("last_name" in data) {
            this.lastName = data.last_name;
        }
        if ("is_forum" in data) {
            this.forum = data.is_forum;
            if ("threadId" in data && data.threadId) {
                this.threadId = data.threadId;
            }
            if ("inTopic" in data) {
                this.inTopic = data.inTopic;
            }
        }
        return data;
    }
    isChannel() {
        return tslib_1.__classPrivateFieldGet(this, _Chat_chatType, "f") === "channel";
    }
    isSupergroup() {
        return tslib_1.__classPrivateFieldGet(this, _Chat_chatType, "f") === "supergroup";
    }
    isGroup() {
        return tslib_1.__classPrivateFieldGet(this, _Chat_chatType, "f") === "group";
    }
    isPrivate() {
        return tslib_1.__classPrivateFieldGet(this, _Chat_chatType, "f") === "private";
    }
    me() {
        if (!this.client.user) {
            throw new TelegramError(ErrorCodes.InvalidClientId);
        }
        return this.client.getChatMember(this.id, this.client.user.id);
    }
    fetch({ force = true, fullInfo = false } = {}) {
        return this.client.chats.fetch(this.id, { force, fullInfo });
    }
    async memberPermissions(member, checkAdmin) {
        if (this.isPrivate())
            return null;
        if (checkAdmin &&
            typeof member !== "string" &&
            member.status === "creator") {
            const permissions = Object.fromEntries(Object.entries(UserPermissions.Flags).map(([key]) => [key, true]));
            return new UserPermissions(permissions);
        }
        const memberId = typeof member === "string" ? member : member.id;
        if (!memberId)
            return null;
        const fetchMember = await this.client
            .getChatMember(this.id, memberId)
            .catch(() => null);
        if (fetchMember && fetchMember.permissions) {
            if (Object.keys(fetchMember.permissions).length === 0) {
                return this.memberPermissions(fetchMember, checkAdmin);
            }
            return fetchMember.permissions;
        }
        return null;
    }
    createMessageCollector(options = {}) {
        return new MessageCollector(this.client, this, options);
    }
    awaitMessages(options = {}) {
        return new Promise((resolve, reject) => {
            const collector = this.createMessageCollector(options);
            collector.once(CollectorEvents.End, (collection, reason) => {
                var _a;
                if ((_a = options.errors) === null || _a === void 0 ? void 0 : _a.includes(reason)) {
                    reject(collection);
                }
                else {
                    resolve(collection);
                }
            });
        });
    }
    createReactionCollector(options = {}) {
        return new ReactionCollector(this.client, this, options);
    }
    awaitReactions(options = {}) {
        return new Promise((resolve, reject) => {
            const collect = this.createReactionCollector(options);
            collect.on(ReactionCollectorEvents.End, (collections, reason) => {
                var _a;
                if ((_a = options.errors) === null || _a === void 0 ? void 0 : _a.includes(reason)) {
                    reject(collections);
                }
                else {
                    resolve(collections);
                }
            });
        });
    }
    createMessageComponentCollector(options = {}) {
        return new InlineKeyboardCollector(this.client, options);
    }
    send(text, options = {}) {
        if (typeof text === "object") {
            return this.client.sendMediaGroup({
                chatId: this.id,
                ...(this.threadId &&
                    this.inTopic && { messageThreadId: this.threadId }),
                ...text,
            });
        }
        return this.client.sendMessage({
            text,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    verify(description) {
        return this.client.verifyChat(this.id, description);
    }
    removeVerification() {
        return this.client.removeChatVerification(this.id);
    }
    kick(userId, options = {}) {
        return this.client.kickChatMember({
            userId,
            chatId: this.id,
            ...options,
        });
    }
    ban(userId, options = {}) {
        return this.client.banChatMember({
            userId,
            chatId: this.id,
            ...options,
        });
    }
    unban(userId, onlyIfBanned) {
        return this.client.banChatMember({
            userId,
            chatId: this.id,
            ...(onlyIfBanned && { onlyIfBanned }),
        });
    }
    banSenderChat(senderChatId) {
        return this.client.banChatSenderChat(this.id, senderChatId);
    }
    unbanSenderChat(senderChatId) {
        return this.client.unbanChatSenderChat(this.id, senderChatId);
    }
    leave() {
        return this.client.leaveChat(this.id);
    }
    fetchAdmins() {
        return this.client.getChatAdministrators(this.id);
    }
    membersCount() {
        return this.client.getChatMemberCount(this.id);
    }
    fetchUserBoosts(userId) {
        return this.client.getUserChatBoosts(this.id, userId);
    }
    setStickerSet(name) {
        return this.client.setChatStickerSet(this.id, name);
    }
    deleteStickerSet() {
        return this.client.deleteChatStickerSet(this.id);
    }
    forwardMessages(messageIds, chatId, options = {}) {
        return this.client.forwardMessages({
            chatId,
            fromChatId: this.id,
            messageIds,
            ...options,
        });
    }
    copyMessages(messageIds, chatId, options = {}) {
        return this.client.copyMessages({
            chatId,
            fromChatId: this.id,
            messageIds,
            ...options,
        });
    }
    deleteMessage(id) {
        return this.client.deleteMessage(this.id, id);
    }
    deleteMessages(ids) {
        return this.client.deleteMessages(this.id, ids);
    }
    setMenuButton(menuButton) {
        return this.client.setChatMenuButton(this.id, menuButton);
    }
    createForumTopic(name, options = {}) {
        return this.client.createForumTopic({
            name,
            chatId: this.id,
            ...options,
        });
    }
    editGeneralForumTopic(name) {
        return this.client.editGeneralForumTopic(this.id, name);
    }
    closeGeneralForumTopic() {
        return this.client.closeGeneralForumTopic(this.id);
    }
    reopenGeneralForumTopic() {
        return this.client.reopenGeneralForumTopic(this.id);
    }
    hideGeneralForumTopic() {
        return this.client.hideGeneralForumTopic(this.id);
    }
    unhideGeneralForumTopic() {
        return this.client.unhideGeneralForumTopic(this.id);
    }
    unpinAllGeneralForumTopicMessages() {
        return this.client.unpinAllGeneralForumTopicMessages(this.id);
    }
    setPermissions(perms, useIndependentChatPermissions) {
        return this.client.setChatPermissions({
            chatId: this.id,
            permissions: perms,
            ...(useIndependentChatPermissions && { useIndependentChatPermissions }),
        });
    }
    createSubscriptionInvite(subscriptionPeriod, subscriptionPrice, name) {
        return this.client.createChatSubscriptionInviteLink({
            chatId: this.id,
            subscriptionPeriod,
            subscriptionPrice,
            ...(name && { name }),
        });
    }
    editSubscriptionInvite(inviteLink, name) {
        return this.client.editChatSubscriptionInviteLink({
            chatId: this.id,
            inviteLink,
            ...(name && { name }),
        });
    }
    createInvite(options = {}) {
        return this.client.createChatInviteLink({
            chatId: this.id,
            ...options,
        });
    }
    editInvite(inviteLink, options = {}) {
        return this.client.editChatInviteLink({
            chatId: this.id,
            inviteLink,
            ...options,
        });
    }
    revokeInvite(inviteLink) {
        return this.client.revokeChatInviteLink(this.id, inviteLink);
    }
    setPhoto(photo) {
        return this.client.setChatPhoto(this.id, photo);
    }
    deletePhoto() {
        return this.client.deleteChatPhoto(this.id);
    }
    setTitle(title) {
        return this.client.setChatTitle(this.id, title);
    }
    setDescription(description) {
        return this.client.setChatDescription(this.id, description);
    }
    pinMessage(messageId, { notification, businessConnectionId } = {}) {
        return this.client.pinChatMessage({
            chatId: this.id,
            messageId,
            ...(notification && { disableNotification: notification }),
            ...(businessConnectionId && { businessConnectionId }),
        });
    }
    unpinMessage({ messageId, businessConnectionId } = {}) {
        return this.client.unpinChatMessage({
            chatId: this.id,
            ...(messageId && { messageId }),
            ...(businessConnectionId && { businessConnectionId }),
        });
    }
    unpinAllMessages() {
        return this.client.unpinAllChatMessages(this.id);
    }
    sendPhoto(photo, options = {}) {
        return this.client.sendPhoto({
            photo,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendAudio(audio, options = {}) {
        return this.client.sendAudio({
            audio,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendPaidMedia(media, starCount, options = {}) {
        return this.client.sendPaidMedia({
            media,
            starCount,
            chatId: this.id,
            ...options,
        });
    }
    sendDocument(document, options = {}) {
        return this.client.sendDocument({
            document,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendVideo(video, options = {}) {
        return this.client.sendVideo({
            video,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendAnimation(animation, options = {}) {
        return this.client.sendAnimation({
            animation,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendVoice(voice, options = {}) {
        return this.client.sendVoice({
            voice,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendVideoNote(videoNote, options = {}) {
        return this.client.sendVideoNote({
            videoNote,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendMediaGroup(media, options = {}) {
        return this.client.sendMediaGroup({
            media,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendLocation(latitude, longitude, options = {}) {
        return this.client.sendLocation({
            latitude,
            longitude,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendVenue(latitude, longitude, options) {
        return this.client.sendVenue({
            latitude,
            longitude,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendContact(phoneNumber, firstName, options = {}) {
        return this.client.sendContact({
            phoneNumber,
            firstName,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendPoll(question, options, other = {}) {
        return this.client.sendPoll({
            question,
            options,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...other,
        });
    }
    sendDice(emoji, options = {}) {
        return this.client.sendDice({
            emoji,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendAction(action = "typing") {
        return this.client.sendChatAction({
            action,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
        });
    }
    sendSticker(sticker, options = {}) {
        return this.client.sendSticker({
            sticker,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendInvoice(title, description, payload, currency, prices, options = {}) {
        return this.client.sendInvoice({
            title,
            description,
            payload,
            currency,
            prices,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    sendGame(gameShortName, options = {}) {
        return this.client.sendGame({
            gameShortName,
            chatId: this.id,
            ...(this.threadId && this.inTopic && { messageThreadId: this.threadId }),
            ...options,
        });
    }
    equals(other) {
        if (!other || !(other instanceof Chat))
            return false;
        return (this.id === other.id &&
            this.title === other.title &&
            this.username === other.username &&
            this.firstName === other.firstName &&
            this.lastName === other.lastName &&
            this.forum === other.forum &&
            this.threadId === other.threadId);
    }
}
_Chat_chatType = new WeakMap();
module.exports = { Chat };
