"use strict";
const { Base } = require("../Base");
const { TelegramError } = require("../../errors/TelegramError");
const { ErrorCodes } = require("../../errors/ErrorCodes");
const { UserPermissions } = require("../../util/permission/UserPermissions");
const { isDeepStrictEqual } = require("../../util/Utils");
class ChatMember extends Base {
    constructor(client, chatId, data) {
        super(client);
        this.chatId = String(chatId);
        this.status = data.status || null;
        const permissions = {};
        if ("can_be_edited" in data) {
            permissions.beEdited = data.can_be_edited;
        }
        if ("can_manage_chat" in data) {
            permissions.manageChat = data.can_manage_chat;
        }
        if ("can_delete_messages" in data) {
            permissions.deleteMessages = data.can_delete_messages;
        }
        if ("can_manage_video_chats" in data) {
            permissions.manageVideoChats = data.can_manage_video_chats;
        }
        if ("can_restrict_members" in data) {
            permissions.restrictMembers = data.can_restrict_members;
        }
        if ("can_promote_members" in data) {
            permissions.promoteMembers = data.can_promote_members;
        }
        if ("can_change_info" in data) {
            permissions.changeInfo = data.can_change_info;
        }
        if ("can_invite_users" in data) {
            permissions.inviteUsers = data.can_invite_users;
        }
        if ("can_post_stories" in data) {
            permissions.postStories = data.can_post_stories;
        }
        if ("can_edit_stories" in data) {
            permissions.editStories = data.can_edit_stories;
        }
        if ("can_delete_stories" in data) {
            permissions.deleteStories = data.can_delete_stories;
        }
        if ("can_post_messages" in data) {
            permissions.postMessages = data.can_post_messages;
        }
        if ("can_edit_messages" in data) {
            permissions.editMessages = data.can_edit_messages;
        }
        if ("can_pin_messages" in data) {
            permissions.pinMessages = data.can_pin_messages;
        }
        if ("can_manage_topics" in data) {
            permissions.manageTopics = data.can_manage_topics;
        }
        if ("can_send_messages" in data) {
            permissions.sendMessages = data.can_send_messages;
        }
        if ("can_send_audios" in data) {
            permissions.sendAudios = data.can_send_audios;
        }
        if ("can_send_documents" in data) {
            permissions.sendDocuments = data.can_send_documents;
        }
        if ("can_send_photos" in data) {
            permissions.sendPhotos = data.can_send_photos;
        }
        if ("can_send_videos" in data) {
            permissions.sendVideos = data.can_send_videos;
        }
        if ("can_send_video_notes" in data) {
            permissions.sendVideoNotes = data.can_send_video_notes;
        }
        if ("can_send_voice_notes" in data) {
            permissions.sendVoiceNotes = data.can_send_voice_notes;
        }
        if ("can_send_polls" in data) {
            permissions.sendPolls = data.can_send_polls;
        }
        if ("can_send_other_messages" in data) {
            permissions.sendOtherMessages = data.can_send_other_messages;
        }
        if ("can_add_web_page_previews" in data) {
            permissions.addWebPagePreviews = data.can_add_web_page_previews;
        }
        this.permissions = new UserPermissions(this.status === "creator" ? UserPermissions.Flags : permissions);
        this._patch(data);
    }
    _patch(data) {
        if ("user" in data) {
            this.user = this.client.users._add(data.user);
        }
        this.anonymous = Boolean("is_anonymous" in data && data.is_anonymous);
        if ("custom_title" in data) {
            this.nickName = data.custom_title;
        }
        if ("is_member" in data) {
            this.isMember = data.is_member;
        }
        if ("until_date" in data) {
            this.untilUnixTime = data.until_date;
        }
        return data;
    }
    get id() {
        var _a, _b;
        return (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : null;
    }
    get untilTimestamp() {
        return this.untilUnixTime ? this.untilUnixTime * 1000 : null;
    }
    get untilAt() {
        return this.untilTimestamp ? new Date(this.untilTimestamp) : null;
    }
    async fetch() {
        if (!this.id)
            return null;
        return this.client.getChatMember(this.chatId, this.id);
    }
    async permissionsIn(channel, checkAdmin) {
        const chat = this.client.chats.resolve(channel);
        if (!chat || chat.isPrivate() || !this.id) {
            return null;
        }
        return chat.memberPermissions(this.id, checkAdmin);
    }
    kick(options = {}) {
        if (!this.id) {
            throw new TelegramError(ErrorCodes.UserIdNotAvailable);
        }
        return this.client.kickChatMember({
            userId: this.id,
            chatId: this.chatId,
            ...options,
        });
    }
    ban(options = {}) {
        if (!this.id) {
            throw new TelegramError(ErrorCodes.UserIdNotAvailable);
        }
        return this.client.banChatMember({
            userId: this.id,
            chatId: this.chatId,
            ...options,
        });
    }
    unban(onlyIfBanned) {
        if (!this.id) {
            throw new TelegramError(ErrorCodes.UserIdNotAvailable);
        }
        return this.client.banChatMember({
            userId: this.id,
            chatId: this.chatId,
            ...(onlyIfBanned && { onlyIfBanned }),
        });
    }
    banSenderChat(senderChatId) {
        return this.client.banChatSenderChat(this.chatId, senderChatId);
    }
    unbanSenderChat(senderChatId) {
        return this.client.unbanChatSenderChat(this.chatId, senderChatId);
    }
    restrict(perms, options = {}) {
        if (!this.id) {
            throw new TelegramError(ErrorCodes.UserIdNotAvailable);
        }
        return this.client.restrictChatMember({
            userId: this.id,
            chatId: this.chatId,
            permissions: perms,
            ...options,
        });
    }
    promote(persm, isAnonymous) {
        if (!this.id) {
            throw new TelegramError(ErrorCodes.UserIdNotAvailable);
        }
        return this.client.promoteChatMember({
            chatId: this.chatId,
            userId: this.id,
            ...(isAnonymous && { isAnonymous }),
            permissions: persm,
        });
    }
    setNikeName(name) {
        if (!this.id) {
            throw new TelegramError(ErrorCodes.UserIdNotAvailable);
        }
        return this.client.setChatAdministratorCustomTitle({
            chatId: this.chatId,
            userId: this.id,
            customTitle: name,
        });
    }
    equals(other) {
        if (!other || !(other instanceof ChatMember))
            return false;
        return (this.chatId === other.chatId &&
            this.id === other.id &&
            this.status === other.status &&
            isDeepStrictEqual(this.permissions, other.permissions) &&
            this.user !== undefined &&
            other.user !== undefined &&
            this.user.equals(other.user) &&
            this.anonymous === other.anonymous &&
            this.nickName === other.nickName &&
            this.isMember === other.isMember &&
            this.untilUnixTime === other.untilUnixTime);
    }
    toString() {
        var _a, _b;
        return (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "";
    }
}
module.exports = { ChatMember };
