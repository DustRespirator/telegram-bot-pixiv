"use strict";
const { Chat } = require("./Chat");
const { Photo } = require("../media/Photo");
const { Location } = require("../misc/Location");
const { Sticker } = require("../media/Sticker");
const { ReactionType } = require("../misc/ReactionType");
const { Message } = require("../message/Message");
const { ChatPermissions } = require("../../util/permission/ChatPermissions");
class ChatFullInfo extends Chat {
    constructor(client, data) {
        super(client, data);
        this._patch(data);
    }
    _patch(data) {
        if ("title" in data) {
            this.title = data.title;
        }
        if ("username" in data) {
            this.username = data.username;
        }
        if ("first_name" in data) {
            this.firstName = data.first_name;
        }
        if ("last_name" in data) {
            this.lastName = data.last_name;
        }
        if ("is_forum" in data) {
            this.forum = data.is_forum;
        }
        if ("accent_color_id" in data) {
            this.accentColorId = data.accent_color_id;
        }
        if ("max_reaction_count" in data) {
            this.maxReactionCount = data.max_reaction_count;
        }
        if ("photo" in data && data.photo) {
            this.photo = {
                smail: new Photo(this.client, {
                    file_id: data.photo.small_file_id,
                    file_unique_id: data.photo.small_file_unique_id,
                    width: 0,
                    height: 0,
                }),
                big: new Photo(this.client, {
                    file_id: data.photo.big_file_id,
                    file_unique_id: data.photo.big_file_unique_id,
                    width: 0,
                    height: 0,
                }),
            };
        }
        if ("active_usernames" in data) {
            this.activeUsernames = data.active_usernames;
        }
        if ("birthdate" in data && data.birthdate) {
            this.birthdate = {
                day: data.birthdate.day,
                month: data.birthdate.month,
                ...(data.birthdate.year && { year: data.birthdate.year }),
            };
        }
        if ("business_intro" in data && data.business_intro) {
            this.businessIntro = {
                ...(data.business_intro.title && { title: data.business_intro.title }),
                ...(data.business_intro.message && {
                    message: data.business_intro.message,
                }),
                ...(data.business_intro.sticker && {
                    sticker: new Sticker(this.client, data.business_intro.sticker),
                }),
            };
        }
        if ("business_location" in data && data.business_location) {
            this.businessLocation = {
                address: data.business_location.address,
                ...(data.business_location.location && {
                    location: new Location(this.client, data.business_location.location),
                }),
            };
        }
        if ("business_opening_hours" in data && data.business_opening_hours) {
            this.businessOpeningHours = {
                timeZone: data.business_opening_hours.time_zone_name,
                hours: data.business_opening_hours.opening_hours.map(({ opening_minute, closing_minute }) => ({
                    opening: opening_minute,
                    closing: closing_minute,
                })),
            };
        }
        if ("personal_chat" in data && data.personal_chat) {
            this.personalChat = new Chat(this.client, data.personal_chat);
        }
        if ("available_reactions" in data) {
            this.availableReactions = data.available_reactions.map((react) => new ReactionType(react));
        }
        if ("background_custom_emoji_id" in data) {
            this.backgroundCustomEmojiId = data.background_custom_emoji_id;
        }
        if ("profile_accent_color_id" in data) {
            this.profileAccentColorId = data.profile_accent_color_id;
        }
        if ("profile_background_custom_emoji_id" in data) {
            this.profileBackgroundCustomEmojiId =
                data.profile_background_custom_emoji_id;
        }
        if ("emoji_status_custom_emoji_id" in data) {
            this.emojiStatusCustomEmojiId = data.emoji_status_custom_emoji_id;
        }
        if ("emoji_status_expiration_date" in data) {
            this.emojiStatusExpirationDate = data.emoji_status_expiration_date;
        }
        if ("bio" in data) {
            this.bio = data.bio;
        }
        if ("has_private_forwards" in data) {
            this.privateForwards = data.has_private_forwards;
        }
        if ("has_restricted_voice_and_video_messages" in data) {
            this.restrictedMediaMessages =
                data.has_restricted_voice_and_video_messages;
        }
        if ("join_to_send_messages" in data) {
            this.joinToSendMessages = data.join_to_send_messages;
        }
        if ("join_by_request" in data) {
            this.joinByRequest = data.join_by_request;
        }
        if ("description" in data) {
            this.description = data.description;
        }
        if ("invite_link" in data) {
            this.inviteLink = data.invite_link;
        }
        if ("pinned_message" in data) {
            this.pinnedMessage = new Message(this.client, data.pinned_message);
        }
        if ("permissions" in data && data.permissions) {
            const permissions = {};
            if ("can_send_messages" in data.permissions) {
                permissions.sendMessages = data.permissions.can_send_messages;
            }
            if ("can_send_audios" in data.permissions) {
                permissions.sendAudios = data.permissions.can_send_audios;
            }
            if ("can_send_documents" in data.permissions) {
                permissions.sendDocuments = data.permissions.can_send_documents;
            }
            if ("can_send_photos" in data.permissions) {
                permissions.sendPhotos = data.permissions.can_send_photos;
            }
            if ("can_send_videos" in data.permissions) {
                permissions.sendVideos = data.permissions.can_send_videos;
            }
            if ("can_send_video_notes" in data.permissions) {
                permissions.sendVideoNotes = data.permissions.can_send_video_notes;
            }
            if ("can_send_voice_notes" in data.permissions) {
                permissions.sendVoiceNotes = data.permissions.can_send_voice_notes;
            }
            if ("can_send_polls" in data.permissions) {
                permissions.sendPolls = data.permissions.can_send_polls;
            }
            if ("can_send_other_messages" in data.permissions) {
                permissions.sendOtherMessages =
                    data.permissions.can_send_other_messages;
            }
            if ("can_add_web_page_previews" in data.permissions) {
                permissions.addWebPagePreviews =
                    data.permissions.can_add_web_page_previews;
            }
            if ("can_change_info" in data.permissions) {
                permissions.changeInfo = data.permissions.can_change_info;
            }
            if ("can_invite_users" in data.permissions) {
                permissions.inviteUsers = data.permissions.can_invite_users;
            }
            if ("can_pin_messages" in data.permissions) {
                permissions.pinMessages = data.permissions.can_pin_messages;
            }
            if ("can_manage_topics" in data.permissions) {
                permissions.manageTopics = data.permissions.can_manage_topics;
            }
            this.permissions = new ChatPermissions(permissions);
        }
        if ("accepted_gift_types" in data) {
            this.acceptedGiftTypes = {
                unlimited: data.accepted_gift_types.unlimited_gifts,
                limited: data.accepted_gift_types.limited_gifts,
                unique: data.accepted_gift_types.unique_gifts,
                premiumSubscription: data.accepted_gift_types.premium_subscription,
            };
        }
        if ("slow_mode_delay" in data) {
            this.slowModeDelay = data.slow_mode_delay;
        }
        if ("unrestrict_boost_count" in data) {
            this.unrestrictBoostCount = data.unrestrict_boost_count;
        }
        if ("message_auto_delete_time" in data) {
            this.messageAutoDeleteTime = data.message_auto_delete_time;
        }
        if ("has_aggressive_anti_spam_enabled" in data) {
            this.aggressiveAntiSpamEnabled = data.has_aggressive_anti_spam_enabled;
        }
        if ("has_hidden_members" in data) {
            this.hiddenMembers = data.has_hidden_members;
        }
        if ("has_protected_content" in data) {
            this.protectedContent = data.has_protected_content;
        }
        if ("has_visible_history" in data) {
            this.visibleHistory = data.has_visible_history;
        }
        if ("sticker_set_name" in data) {
            this.stickerSetName = data.sticker_set_name;
        }
        if ("can_set_sticker_set" in data) {
            this.setStickeredSet = data.can_set_sticker_set;
        }
        if ("custom_emoji_sticker_set_name" in data) {
            this.customEmojiStickerSetName = data.custom_emoji_sticker_set_name;
        }
        if ("linked_chat_id" in data) {
            this.linkedId = String(data.linked_chat_id);
        }
        if ("location" in data && data.location) {
            this.location = {
                location: new Location(this.client, data.location.location),
                address: data.location.address,
            };
        }
        return data;
    }
}
module.exports = { ChatFullInfo };
