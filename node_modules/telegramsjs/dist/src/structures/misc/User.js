"use strict";
const { Base } = require("../Base");
class User extends Base {
    constructor(client, data) {
        var _a;
        super(client);
        this.id = String(data.id);
        this.isBot = Boolean(data.id == ("user" in client ? (_a = client.user) === null || _a === void 0 ? void 0 : _a.id : 0) ? true : data.is_bot);
        this._patch(data);
    }
    _patch(data) {
        this.firstName = data.first_name;
        if ("last_name" in data) {
            this.lastName = data.last_name;
        }
        if ("username" in data) {
            this.username = data.username;
        }
        if ("language_code" in data) {
            this.language = data.language_code;
        }
        this.isPremium = Boolean(data.is_premium);
        this.inAttachmentMenu = Boolean(data.added_to_attachment_menu);
        return data;
    }
    fetch({ force = true, fullInfo = false } = {}) {
        return this.client.users.fetch(this.id, { force, fullInfo });
    }
    send(text, options = {}) {
        if (typeof text === "object") {
            return this.client.sendMediaGroup({
                chatId: this.id,
                ...text,
            });
        }
        return this.client.sendMessage({
            text,
            chatId: this.id,
            ...options,
        });
    }
    sendGift(giftId, options = {}) {
        return this.client.sendGift({
            giftId,
            userId: this.id,
            ...options,
        });
    }
    giftPremiumSubscription(monthCount, starCount, options = {}) {
        return this.client.giftPremiumSubscription({
            ...options,
            monthCount,
            starCount,
            userId: this.id,
        });
    }
    saveInlineMessage(result, options = {}) {
        return this.client.savePreparedInlineMessage({
            result,
            userId: this.id,
            ...options,
        });
    }
    setStarSubscription(telegramPaymentChargeId, isCanceled) {
        return this.client.editUserStarSubscription({
            userId: this.id,
            telegramPaymentChargeId,
            isCanceled,
        });
    }
    refundStarPayment(telegramPaymentId) {
        return this.client.refundStarPayment(this.id, telegramPaymentId);
    }
    setPassportErrors(errors) {
        return this.client.setPassportDataErrors(this.id, errors);
    }
    fetchProfilePhotos(offset = 0, limit = 100) {
        return this.client.getUserProfilePhotos({
            userId: this.id,
            limit,
            offset,
        });
    }
    fetchChatBoosts(chatId) {
        return this.client.getUserChatBoosts(chatId, this.id);
    }
    setEmojiStatus({ emojiStatusCustomEmojiId, emojiStatusExpirationDate } = {}) {
        return this.client.setUserEmojiStatus({
            userId: this.id,
            ...(emojiStatusCustomEmojiId && { emojiStatusCustomEmojiId }),
            ...(emojiStatusExpirationDate && { emojiStatusExpirationDate }),
        });
    }
    verify(description) {
        return this.client.verifyUser(this.id, description);
    }
    removeVerification() {
        return this.client.removeUserVerification(this.id);
    }
    equals(other) {
        if (!other || !(other instanceof User))
            return false;
        return (this.id === other.id &&
            this.isBot === other.isBot &&
            this.firstName === other.firstName &&
            this.lastName === other.lastName &&
            this.username === other.username &&
            this.language === other.language &&
            this.isPremium === other.isPremium &&
            this.inAttachmentMenu === other.inAttachmentMenu);
    }
    toString() {
        var _a;
        return (_a = this.username) !== null && _a !== void 0 ? _a : "";
    }
}
module.exports = { User };
