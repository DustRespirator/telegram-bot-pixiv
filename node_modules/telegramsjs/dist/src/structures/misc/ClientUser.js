"use strict";
const { User } = require("./User");
class ClientUser extends User {
    constructor(client, data) {
        super(client, data);
        this.isBot = true;
        this.username = data.username;
        this.canJoinGroups = data.can_join_groups;
        this.canReadAllMessages = data.can_read_all_group_messages;
        this.inlineQueries = data.supports_inline_queries;
        this.connectBusiness = data.can_connect_to_business;
        this.mainWebApp = data.has_main_web_app;
        this._patch(data);
    }
    get token() {
        return this.client.authToken;
    }
    fetch({ force = true, fullInfo = false } = {}) {
        if (fullInfo) {
            return this.client.users.fetch(this.id, { force, fullInfo });
        }
        return this.client.fetchApplication();
    }
    fetchStarTransactions({ limit, offset } = {}) {
        return this.client.getStarTransactions(offset, limit);
    }
    fetchGifts() {
        return this.client.getAvailableGifts();
    }
    setCommands(commands, { scope, languageCode } = {}) {
        return this.client.setMyCommands({
            commands,
            ...(scope && { scope }),
            ...(languageCode && { languageCode }),
        });
    }
    fetchCommands(score, language) {
        return this.client.getMyCommands(score, language);
    }
    deleteCommands(score, language) {
        return this.client.deleteMyCommands(score, language);
    }
    setName(name, language) {
        return this.client.setMyName(name, language);
    }
    fetchName(language) {
        return this.client.getMyName(language);
    }
    setDescription(description, language) {
        return this.client.setMyDescription(description, language);
    }
    fetchDescription(language) {
        return this.client.getMyDescription(language);
    }
    setShortDescription(description, language) {
        return this.client.setMyShortDescription(description, language);
    }
    fetchShortDescription(language) {
        return this.client.getMyShortDescription(language);
    }
    setMenuButton(chatId, menu) {
        return this.client.setChatMenuButton(chatId, menu);
    }
    fetchMenuButton(chatId) {
        return this.client.getChatMenuButton(chatId);
    }
    setAdministratorRights(rights, forChannels) {
        return this.client.setMyDefaultAdministratorRights(rights, forChannels);
    }
    fetchAdministratorRigths(forChannels) {
        return this.client.getMyDefaultAdministratorRights(forChannels);
    }
    equals(other) {
        if (!other || !(other instanceof ClientUser))
            return false;
        if (!super.equals(other))
            return false;
        return (this.canJoinGroups === other.canJoinGroups &&
            this.canReadAllMessages === other.canReadAllMessages &&
            this.inlineQueries === other.inlineQueries &&
            this.connectBusiness === other.connectBusiness &&
            this.mainWebApp === other.mainWebApp);
    }
}
module.exports = { ClientUser };
