"use strict";
const { Base } = require("../Base");
const { Photo } = require("../media/Photo");
const { Chat } = require("../chat/Chat");
const { UserPermissions } = require("../../util/permission/UserPermissions");
const { isDeepStrictEqual } = require("../../util/Utils");
class ChatShared extends Base {
    constructor(client, data) {
        super(client);
        this.id = data.chat_id;
        this.requestId = data.request_id;
        if ("title" in data) {
            this.title = data.title;
        }
        if ("username" in data) {
            this.username = data.username;
        }
        if ("photo" in data) {
            this.photo = data.photo.map((photo) => new Photo(client, photo));
        }
    }
    async memberPermissions(member, checkAdmin) {
        if (checkAdmin &&
            typeof member !== "string" &&
            member.status === "creator") {
            const permissions = Object.fromEntries(Object.entries(UserPermissions.Flags).map(([key]) => [key, true]));
            return new UserPermissions(permissions);
        }
        const memberId = typeof member === "string" ? member : member.id;
        if (!memberId)
            return null;
        const fetchMember = await this.client
            .getChatMember(this.id, memberId)
            .catch(() => null);
        if (fetchMember && fetchMember.permissions) {
            if (Object.keys(fetchMember.permissions).length === 0) {
                return this.memberPermissions(fetchMember, checkAdmin);
            }
            return fetchMember.permissions;
        }
        return null;
    }
    equals(other) {
        if (!other || !(other instanceof ChatShared))
            return false;
        return (this.id === other.id &&
            this.requestId === other.requestId &&
            this.title === other.title &&
            this.username === other.username &&
            isDeepStrictEqual(this.photo, other.photo));
    }
}
function applyToClass(structure) {
    const props = [
        "me",
        "fetch",
        "createMessageCollector",
        "awaitMessages",
        "createReactionCollector",
        "awaitReactions",
        "createMessageComponentCollector",
        "send",
        "leave",
        "verify",
        "removeVerification",
        "fetchAdmins",
        "membersCount",
        "fetchUserBoosts",
        "forwardMessages",
        "copyMessages",
        "deleteMessage",
        "deleteMessages",
        "setMenuButton",
        "pinMessage",
        "unpinMessage",
        "unpinAllMessages",
        "sendPhoto",
        "sendAudio",
        "sendPaidMedia",
        "sendDocument",
        "sendVideo",
        "sendAnimation",
        "sendVoice",
        "sendVideoNote",
        "sendMediaGroup",
        "sendLocation",
        "sendVenue",
        "sendContact",
        "sendPoll",
        "sendDice",
        "sendAction",
        "sendSticker",
        "sendInvoice",
        "sendGame",
    ];
    for (const prop of props) {
        Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(Chat.prototype, prop) || {});
    }
}
applyToClass(ChatShared);
module.exports = { ChatShared };
