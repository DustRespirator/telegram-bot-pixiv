"use strict";
const fs = require("node:fs");
const fetch = require("node-fetch");
const { Base } = require("../Base");
const { TelegramError } = require("../../errors/TelegramError");
const { ErrorCodes } = require("../../errors/ErrorCodes");
class InputFile extends Base {
    constructor(client, data) {
        super(client);
        this.id = data.file_id;
        this.uniqueId = data.file_unique_id;
        this.size = data.file_size || null;
        this.path = data.file_path || null;
    }
    get url() {
        return this.path
            ? `https://api.telegram.org/file/bot${this.client.authToken}/${this.path}`
            : null;
    }
    fetch() {
        return this.client.getFile(this.id);
    }
    async download() {
        var _a;
        const filePath = this.path || ((_a = (await this.fetch().catch(() => null))) === null || _a === void 0 ? void 0 : _a.path);
        if (!filePath) {
            throw new TelegramError(ErrorCodes.FileRetrievalFailed);
        }
        const fileUrl = `https://api.telegram.org/file/bot${this.client.authToken}/${filePath}`;
        try {
            const response = await fetch(fileUrl);
            const arrayBuffer = await response.arrayBuffer();
            return Buffer.from(arrayBuffer);
        }
        catch (err) {
            throw new TelegramError(ErrorCodes.FileDownloadFailed, {
                err: String(err),
            });
        }
    }
    async write(path, writeType = "promise", options = {}) {
        var _a;
        if (writeType === "promise") {
            const fileData = await this.download();
            await fs.promises.writeFile(path, fileData, options);
            return;
        }
        if (writeType === "stream") {
            const fileData = await this.download();
            const writeStream = fs.createWriteStream(path, {
                ...options,
                encoding: (_a = options.encoding) !== null && _a !== void 0 ? _a : undefined,
            });
            writeStream.write(fileData);
            writeStream.end();
            return;
        }
        throw new TelegramError(ErrorCodes.FileWriteInvalidType);
    }
}
module.exports = { InputFile };
