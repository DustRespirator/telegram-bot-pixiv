"use strict";
var _HTTPResponseError_request;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTPResponseError = void 0;
const tslib_1 = require("tslib");
class HTTPResponseError extends Error {
    constructor(response, request) {
        const { error_code, description, parameters } = response;
        super(description);
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "parameters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _HTTPResponseError_request.set(this, void 0);
        this.name = `ErrorResponse[${error_code}]`;
        this.code = error_code;
        this.description = description;
        this.parameters = parameters;
        if (request)
            tslib_1.__classPrivateFieldSet(this, _HTTPResponseError_request, request, "f");
    }
    get url() {
        var _a;
        return ((_a = tslib_1.__classPrivateFieldGet(this, _HTTPResponseError_request, "f")) === null || _a === void 0 ? void 0 : _a.url) || null;
    }
    get status() {
        var _a;
        return ((_a = tslib_1.__classPrivateFieldGet(this, _HTTPResponseError_request, "f")) === null || _a === void 0 ? void 0 : _a.status) || null;
    }
    get statusText() {
        var _a;
        return ((_a = tslib_1.__classPrivateFieldGet(this, _HTTPResponseError_request, "f")) === null || _a === void 0 ? void 0 : _a.statusText) || null;
    }
    get headers() {
        var _a;
        return ((_a = tslib_1.__classPrivateFieldGet(this, _HTTPResponseError_request, "f")) === null || _a === void 0 ? void 0 : _a.headers) || null;
    }
}
exports.HTTPResponseError = HTTPResponseError;
_HTTPResponseError_request = new WeakMap();
