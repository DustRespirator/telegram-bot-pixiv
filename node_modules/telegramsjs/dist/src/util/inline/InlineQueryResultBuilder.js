"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQueryResultBuilder = void 0;
const InlineQueryResultCachedBuilder_1 = require("./InlineQueryResultCachedBuilder");
class InlineQueryResultBuilder {
    static article(id, title, inputMessageContent, options) {
        return {
            type: "article",
            id,
            title,
            input_message_content: inputMessageContent,
            ...options,
        };
    }
    static audio(id, title, audioUrl, options) {
        return {
            type: "audio",
            id,
            title,
            audio_url: audioUrl,
            ...options,
        };
    }
    static contact(id, phoneNumber, firstName, options) {
        return {
            type: "contact",
            id,
            first_name: firstName,
            phone_number: phoneNumber,
            ...options,
        };
    }
    static game(id, gameShortName, replyMarkup) {
        return {
            type: "game",
            id,
            game_short_name: gameShortName,
            ...(replyMarkup && { reply_markup: replyMarkup }),
        };
    }
    static documentPdf(id, title, url, options) {
        return {
            type: "document",
            id,
            title: title,
            document_url: url,
            mime_type: "application/pdf",
            ...options,
        };
    }
    static documentZip(id, title, url, options) {
        return {
            type: "document",
            id,
            title: title,
            document_url: url,
            mime_type: "application/zip",
            ...options,
        };
    }
    static gif(id, gifUrl, thumbnailUrl, options) {
        return {
            type: "gif",
            id,
            gif_url: gifUrl,
            thumbnail_url: thumbnailUrl,
            ...options,
        };
    }
    static location(id, latitude, longitude, title, options) {
        return {
            type: "location",
            id,
            latitude,
            longitude,
            title,
            ...options,
        };
    }
    static mpeg4Gif(id, mpeg4Url, thumbnailUrl, options) {
        return {
            type: "mpeg4_gif",
            id,
            mpeg4_url: mpeg4Url,
            thumbnail_url: thumbnailUrl,
            ...options,
        };
    }
    static photo(id, photoUrl, thumbnailUrl, options) {
        return {
            type: "photo",
            id,
            photo_url: photoUrl,
            thumbnail_url: thumbnailUrl,
            ...options,
        };
    }
    static venue(id, options) {
        return { type: "venue", id, ...options };
    }
    static videoHtml(id, title, videoUrl, thumbnailUrl, options) {
        return {
            type: "video",
            id,
            title,
            video_url: videoUrl,
            thumbnail_url: thumbnailUrl,
            mime_type: "text/html",
            ...options,
        };
    }
    static videoMp4(id, title, videoUrl, thumbnailUrl, options) {
        return {
            type: "video",
            id,
            title,
            video_url: videoUrl,
            thumbnail_url: thumbnailUrl,
            mime_type: "video/mp4",
            ...options,
        };
    }
    static voice(id, title, url, options) {
        return {
            type: "voice",
            id,
            title,
            voice_url: url,
            ...options,
        };
    }
}
exports.InlineQueryResultBuilder = InlineQueryResultBuilder;
Object.defineProperty(InlineQueryResultBuilder, "cached", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: InlineQueryResultCachedBuilder_1.InlineQueryResultCachedBuilder
});
