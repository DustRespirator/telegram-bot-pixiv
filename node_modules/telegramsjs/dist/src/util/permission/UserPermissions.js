"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPermissions = void 0;
class UserPermissions {
    constructor(data = {}) {
        Object.defineProperty(this, "allowed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "denied", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.allowed = new Set();
        this.denied = new Set();
        this._patch(data);
    }
    allow(permissions) {
        if (!permissions)
            return this;
        if (permissions instanceof UserPermissions) {
            permissions = permissions.toObject();
        }
        else if (typeof permissions === "string") {
            permissions = { [permissions]: true };
        }
        for (const [key, value] of Object.entries(permissions)) {
            const perm = key;
            if (value) {
                this.allowed.add(perm);
                this.denied.delete(perm);
            }
        }
        return this;
    }
    deny(permissions) {
        if (!permissions)
            return this;
        if (permissions instanceof UserPermissions) {
            permissions = permissions.toObject();
        }
        else if (typeof permissions === "string") {
            permissions = { [permissions]: true };
        }
        for (const [key, value] of Object.entries(permissions)) {
            const perm = key;
            if (value) {
                this.denied.add(perm);
                this.allowed.delete(perm);
            }
        }
        return this;
    }
    has(permission) {
        return this.allowed.has(permission);
    }
    toObject() {
        const flags = {};
        for (const perm of this.allowed) {
            flags[perm] = true;
        }
        for (const perm of this.denied) {
            if (!flags[perm]) {
                flags[perm] = false;
            }
        }
        return flags;
    }
    equals(other) {
        if (!other || !(other instanceof UserPermissions))
            return false;
        const thisAllowed = Array.from(this.allowed).sort();
        const otherAllowed = Array.from(other.allowed).sort();
        const thisDenied = Array.from(this.denied).sort();
        const otherDenied = Array.from(other.denied).sort();
        return (thisAllowed.length === otherAllowed.length &&
            thisDenied.length === otherDenied.length &&
            thisAllowed.every((perm, index) => perm === otherAllowed[index]) &&
            thisDenied.every((perm, index) => perm === otherDenied[index]));
    }
    _patch(data) {
        for (const [key, value] of Object.entries(data)) {
            if (value) {
                this.allowed.add(key);
            }
            else {
                this.denied.add(key);
            }
        }
    }
    static isValid(permission) {
        return Object.keys(UserPermissions.Flags).includes(permission);
    }
}
exports.UserPermissions = UserPermissions;
Object.defineProperty(UserPermissions, "Flags", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
        manageChat: 1,
        deleteMessages: 2,
        manageVideoChats: 3,
        restrictMembers: 4,
        promoteMembers: 5,
        changeInfo: 6,
        inviteUsers: 7,
        postStories: 8,
        editStories: 9,
        deleteStories: 10,
        postMessages: 11,
        editMessages: 12,
        pinMessages: 13,
        manageTopics: 14,
    }
});
