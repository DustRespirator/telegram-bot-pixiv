"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineKeyboardBuilder = void 0;
class InlineKeyboardBuilder {
    constructor(inline_keyboard = [[]]) {
        Object.defineProperty(this, "inline_keyboard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: inline_keyboard
        });
    }
    add(...buttons) {
        var _a;
        (_a = this.inline_keyboard[this.inline_keyboard.length - 1]) === null || _a === void 0 ? void 0 : _a.push(...buttons);
        return this;
    }
    row(...buttons) {
        this.inline_keyboard.push(buttons);
        return this;
    }
    url(text, url) {
        return this.add(InlineKeyboardBuilder.url(text, url));
    }
    static url(text, url) {
        return { text, url };
    }
    text(text, data = text) {
        return this.add(InlineKeyboardBuilder.text(text, data));
    }
    static text(text, data = text) {
        return { text, callback_data: data };
    }
    webApp(text, url) {
        return this.add(InlineKeyboardBuilder.webApp(text, url));
    }
    static webApp(text, url) {
        return { text, web_app: typeof url === "string" ? { url } : url };
    }
    login(text, loginUrl) {
        return this.add(InlineKeyboardBuilder.login(text, loginUrl));
    }
    static login(text, loginUrl) {
        return {
            text,
            login_url: typeof loginUrl === "string" ? { url: loginUrl } : loginUrl,
        };
    }
    switchInline(text, query = "") {
        return this.add(InlineKeyboardBuilder.switchInline(text, query));
    }
    static switchInline(text, query = "") {
        return { text, switch_inline_query: query };
    }
    switchInlineCurrent(text, query = "") {
        return this.add(InlineKeyboardBuilder.switchInlineCurrent(text, query));
    }
    static switchInlineCurrent(text, query = "") {
        return { text, switch_inline_query_current_chat: query };
    }
    switchInlineChosen(text, query = { allow_user_chats: true }) {
        return this.add(InlineKeyboardBuilder.switchInlineChosen(text, query));
    }
    static switchInlineChosen(text, query = { allow_user_chats: true }) {
        return { text, switch_inline_query_chosen_chat: query };
    }
    copyText(text, copyText = text) {
        return this.add(InlineKeyboardBuilder.copyText(text, copyText));
    }
    static copyText(text, copyText = text) {
        return {
            text,
            copy_text: typeof copyText === "string" ? { text: copyText } : copyText,
        };
    }
    game(text) {
        return this.add(InlineKeyboardBuilder.game(text));
    }
    static game(text) {
        return { text, callback_game: {} };
    }
    pay(text) {
        return this.add(InlineKeyboardBuilder.pay(text));
    }
    static pay(text) {
        return { text, pay: true };
    }
    clone() {
        return new InlineKeyboardBuilder(this.inline_keyboard.map((row) => row.slice()));
    }
    combine(other) {
        const json = "toJSON" in other ? other.toJSON() : other;
        const buttons = Array.isArray(json) ? json : json.inline_keyboard;
        for (const row of buttons) {
            this.row().add(...row);
        }
        return this;
    }
    static from(source) {
        if (source instanceof InlineKeyboardBuilder)
            return source.clone();
        return new InlineKeyboardBuilder(source.map((row) => row.slice()));
    }
    equals(other) {
        if (!other)
            return false;
        if (this.inline_keyboard.length !== other.inline_keyboard.length)
            return false;
        for (let i = 0; i < this.inline_keyboard.length; i++) {
            const row = this.inline_keyboard[i];
            const otherRow = other.inline_keyboard[i];
            if (!row || !otherRow || row.length !== otherRow.length)
                return false;
            for (let j = 0; j < row.length; j++) {
                const buttonA = row[j];
                const buttonB = otherRow[j];
                if (!buttonA || !buttonB)
                    return false;
                if ("url" in buttonA && "url" in buttonB) {
                    if (buttonA.text !== buttonB.text || buttonA.url !== buttonB.url)
                        return false;
                }
                else if ("callback_data" in buttonA && "callback_data" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        buttonA.callback_data !== buttonB.callback_data)
                        return false;
                }
                else if ("web_app" in buttonA && "web_app" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        buttonA.web_app.url !== buttonB.web_app.url)
                        return false;
                }
                else if ("login_url" in buttonA && "login_url" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        JSON.stringify(buttonA.login_url) !==
                            JSON.stringify(buttonB.login_url))
                        return false;
                }
                else if ("switch_inline_query" in buttonA &&
                    "switch_inline_query" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        buttonA.switch_inline_query !== buttonB.switch_inline_query)
                        return false;
                }
                else if ("switch_inline_query_current_chat" in buttonA &&
                    "switch_inline_query_current_chat" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        buttonA.switch_inline_query_current_chat !==
                            buttonB.switch_inline_query_current_chat)
                        return false;
                }
                else if ("switch_inline_query_chosen_chat" in buttonA &&
                    "switch_inline_query_chosen_chat" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        JSON.stringify(buttonA.switch_inline_query_chosen_chat) !==
                            JSON.stringify(buttonB.switch_inline_query_chosen_chat))
                        return false;
                }
                else if ("copy_text" in buttonA && "copy_text" in buttonB) {
                    if (buttonA.text !== buttonB.text ||
                        buttonA.copy_text.text !== buttonB.copy_text.text)
                        return false;
                }
                else if ("callback_game" in buttonA && "callback_game" in buttonB) {
                    if (buttonA.text !== buttonB.text)
                        return false;
                }
                else if ("pay" in buttonA && "pay" in buttonB) {
                    if (buttonA.text !== buttonB.text)
                        return false;
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    toJSON() {
        return { inline_keyboard: this.inline_keyboard };
    }
}
exports.InlineKeyboardBuilder = InlineKeyboardBuilder;
