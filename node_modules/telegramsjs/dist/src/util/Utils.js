"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flatten = flatten;
exports.isDeepStrictEqual = isDeepStrictEqual;
const node_assert_1 = require("node:assert");
const collection_1 = require("@telegram.ts/collection");
const isObject = (obj) => !!obj && obj !== null && typeof obj === "object";
function flatten(obj, propsRecursive = false, ...props) {
    if (!isObject(obj))
        return obj;
    const mergedProps = Object.assign({}, ...props);
    const defaultProps = Object.keys(obj)
        .filter((key) => !key.startsWith("_"))
        .reduce((acc, key) => ({ ...acc, [key]: true }), {});
    const finalProps = { ...defaultProps, ...mergedProps };
    const out = {};
    function format(value) {
        if (typeof value === "string" ||
            typeof value === "number" ||
            typeof value === "boolean") {
            return value;
        }
        else if (value instanceof collection_1.Collection) {
            return [...value.values()];
        }
        else if (Array.isArray(value)) {
            return value.map(format);
        }
        else if (isObject(value)) {
            if (typeof value.toJSON === "function") {
                return value.toJSON(propsRecursive, finalProps);
            }
            else if (Symbol.iterator in Object(value)) {
                return [...value];
            }
            return flatten(value, propsRecursive, finalProps);
        }
        else {
            return null;
        }
    }
    for (const [key, value] of Object.entries(obj)) {
        const propValue = finalProps[key];
        if (propValue === false)
            continue;
        if (propValue === true || propValue === undefined) {
            out[key] = format(value);
        }
        else {
            out[propValue] = format(value);
        }
    }
    return out;
}
function isDeepStrictEqual(current, expect) {
    try {
        (0, node_assert_1.deepStrictEqual)(current, expect);
        return true;
    }
    catch {
        return false;
    }
}
